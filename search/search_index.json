{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to ZK Puzzle Writeups","text":"<p>Hi, I am Tim, </p> <ul> <li>pursuing a Master's degree in Applied Cryptography (research on Zero Knowledge Proof and Lattice Analysis)</li> <li>web2/web3/Cryptography Security ethhusiast</li> <li>CTFer and zkHACKer</li> </ul> <p>Here I will put some writeups during my security learning journey randomly.</p>"},{"location":"#recent-blogs","title":"Recent Blogs","text":"<p>{{ blog_content }}</p>"},{"location":"crypto/oven/","title":"Crypto - Oven","text":"<ul> <li>1. Puzzle Description</li> <li>2. Analysis<ul> <li>\u5c0f\u6280\u5de7</li> </ul> </li> <li>3. EXP</li> </ul>"},{"location":"crypto/oven/#1-puzzle-description","title":"1. Puzzle Description","text":"<p>\u9898\u76ee\u5730\u5740\uff1a https://github.com/paradigmxyz/paradigm-ctf-2023/tree/main/oven</p> <p>\u6e90\u7801\u5982\u4e0b\uff1a</p> <pre><code>#!/usr/bin/env python3\nfrom Crypto.Util.number import *\nimport random\nimport os\nimport hashlib\n\nFLAG = os.getenv(\"FLAG\", \"PCTF{flag}\").encode(\"utf8\")\nFLAG = bytes_to_long(FLAG[5:-1])\nassert FLAG.bit_length() &lt; 384\n\nBITS = 1024\n\n\ndef xor(a, b):\n    return bytes([i ^ j for i, j in zip(a, b)])\n\n\n# This doesn't really matter right???\ndef custom_hash(n):\n    state = b\"\\x00\" * 16\n    for i in range(len(n) // 16):\n        state = xor(state, n[i : i + 16])\n\n    for _ in range(5):\n        state = hashlib.md5(state).digest()\n        state = hashlib.sha1(state).digest()\n        state = hashlib.sha256(state).digest()\n        state = hashlib.sha512(state).digest() + hashlib.sha256(state).digest()\n\n    value = bytes_to_long(state)\n\n    return value\n\n\ndef fiat_shamir():\n    p = getPrime(BITS)\n    g = 2\n    y = pow(g, FLAG, p)\n\n    v = random.randint(2, 2**512)\n\n    t = pow(g, v, p)\n    c = custom_hash(long_to_bytes(g) + long_to_bytes(y) + long_to_bytes(t))\n    r = (v - c * FLAG) % (p - 1)\n\n    assert t == (pow(g, r, p) * pow(y, c, p)) % p\n\n    return (t, r), (p, g, y)\n\n\nwhile True:\n    resp = input(\"[1] Get a random signature\\n[2] Exit\\nChoice: \")\n    if \"1\" in resp:\n        print()\n        (t, r), (p, g, y) = fiat_shamir()\n        print(f\"t = {t}\\nr = {r}\")\n        print()\n        print(f\"p = {p}\\ng = {g}\\ny = {y}\")\n        print()\n    elif \"2\" in resp:\n        print(\"Bye!\")\n        exit()\n</code></pre> <p>\u4ee3\u7801\u529f\u80fd\uff1a\u7528\u6237\u53ef\u4ee5\u83b7\u53d6 FLAG \u968f\u673a\u7b7e\u540d\uff0c\u751f\u6210\u968f\u673a\u7b7e\u540d\u7684\u903b\u8f91\u5c31\u5728 <code>fiat-shamir</code> \u51fd\u6570\u91cc\u3002\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u7684hash\u51fd\u6570 <code>custom_hash</code> \u6765\u751f\u6210\u54c8\u5e0c\uff0c\u8fd9\u4e2a\u51fd\u6570\u5206\u522b\u8c03\u7528\u4e86\u56db\u79cd\u4e0d\u540c\u7684hash\u7b97\u6cd5\uff0c\u56e0\u6b64\u60f3\u8981\u7834\u89e3\u5176\u968f\u673a\u6027\u76ee\u524d\u662f\u4e0d\u53ef\u80fd\u7684\u3002</p> <p><code>Fiat Shamir</code> \u53d8\u6362\u662f\u5bc6\u7801\u5b66\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u5de5\u5177\uff0c\u5b83\u7684\u6838\u5fc3\u5728\u4e8e\u4f7f\u7528hash\u7b97\u6cd5\u6765\u751f\u6210\u968f\u673a\u6570\uff0c\u4e3a\u5bc6\u7801\u534f\u8bae\u6dfb\u52a0\u4e86\u968f\u673a\u6027\u3002FS\u53d8\u6362\u4e00\u4e2a\u5178\u578b\u5e94\u7528\u5c31\u662f\u4e3a\u96f6\u77e5\u8bc6\u8bc1\u660e\u7cfb\u7edf\u7cfb\u7edf\u5f15\u5165\u4e86\u975e\u4ea4\u4e92\u6027\uff0c\u8fdb\u800c\u6784\u9020\u51fa snark \u7b49\u534f\u8bae\u3002</p> <p>\u4ece\u4e0a\u8ff0\u6e90\u7801\uff0c\u6211\u4eec\u53ef\u83b7\u5f97\u7684\u4fe1\u606f\u6709 <code>t, r, p, g, y</code> \uff0c\u5176\u5b9e c \u662f\u53ef\u4ee5\u6c42\u51fa\uff0c\u5373\u4f7f\u7528\u9898\u76ee\u6761\u4ef6\u4e2d\u7684 <code>custom_hash</code> \u51fd\u6570\u3002\u90a3\u4e48\u53ef\u80fd\u53d1\u751f\u7684\u6f0f\u6d1e\u70b9\u96c6\u4e2d\u5728 <code>fiat_shamir</code>  \u51fd\u6570\u4e2d\uff0c\u5b83\u662f\u5bf9 FLAG \u8fdb\u884c\u7b7e\u540d\u7684\u51fd\u6570\u529f\u80fd\u90e8\u5206\uff0c\u91cd\u70b9\u5173\u6ce8\uff1a <code>r = (v - c * FLAG) % (p - 1)</code> \u3002\u5bf9\u4e8e\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u76ee\u524d\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u7684\u4fe1\u606f\u6709\uff1a <code>r, c, p</code> \u5747\u662f\u5df2\u77e5\u503c\uff0c\u4e14 FLAG \u7684\u4f4d\u6570\u5df2\u7ecf\u786e\u5b9a\uff1a <code>assert FLAG.bit_length() &lt; 384</code> \u3002 \u53ef\u4ee5\u8054\u60f3\u5230 Dan Boneh \u5728 1996 \u5e74\u63d0\u51fa\u7684 HNP \u95ee\u9898\uff08\u6a21\u6570\u53ef\u53d8\uff09\uff0c\u53ef\u4f7f\u7528\u6807\u51c6\u7684\u683c\u7b97\u6cd5\u8fdb\u884c\u653b\u51fb\u3002\u66f4\u52a0\u8be6\u7ec6\u57fa\u4e8e\u683c\u653b\u51fb\u7684\u5bc6\u7801\u5206\u6790\u8bf7\u53c2\u8003\u8bba\u6587\u3002</p>"},{"location":"crypto/oven/#2-analysis","title":"2. Analysis","text":"<p>\u95ee\u9898\u5c31\u51fa\u5728\u4ee3\u7801\uff1a \\(r = (v - c * FLAG) % (p - 1)\\) \u4e0a\uff0c\u7531\u4e8e r\uff0cc\uff0cp\u5747\u662f\u5df2\u77e5\u503c\uff0c\u4e8e\u662f\uff1a</p> <ol> <li> <p>\u9996\u5148\u5bf9\u4e0a\u8ff0\u5f0f\u5b50\u8fdb\u884c\u6570\u5b66\u53d8\u5f62\uff1a \\(r-v+c*FLAG=0\\mod (p-1)\\) \uff0c\u53ea\u6709 v \u548c FLAG \u662f\u672a\u77e5\u6570\u3002</p> </li> <li> <p>\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u8ff0\u5f0f\u5b50\u6784\u5efa Lattice: </p> </li> </ol> \\[ M = \\begin{pmatrix}(q_1-1)&amp;&amp;&amp;&amp;\\\\ &amp;(q_2-1)&amp;&amp;&amp;\\\\ &amp;&amp;(q_3-1)&amp;&amp;\\\\ c_1&amp;c_2&amp;c_3&amp;1&amp;\\\\ r_1&amp;r_2&amp;r_3&amp;0&amp;K\\\\ \\end{pmatrix} \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>K \u662f <code>FLAG</code> \u7684\u4e00\u4e2a\u4e0a\u754c\uff1b</li> <li> <p>\u7a7a\u767d\u5904\u5747\u4e3a 0 \u3002</p> </li> <li> <p>\u6839\u636e Babai \u7684CVP\u89e3\u51b3\u7b97\u6cd5\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u89e3\u5411\u91cf \\(\\pmb{j}=(l_1,l_2,l_3,FLAG,1)\\) \uff0c\u4f7f\u5f97 \\(\\pmb{j}M=\\pmb{j_k}\\) \u6210\u7acb\u3002</p> </li> <li> <p>\u6ce8\u610f\u5230 \\(\\pmb{j_k}\\) \u5728\u683c\u4e2d\u662f\u4e00\u4e2a\u77ed\u5411\u91cf\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 LLL \u7b97\u6cd5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u627e\u5230\u8fd9\u4e2a\u77ed\u5411\u91cf\u3002\u6ce8\u610f\uff0c\u77ed\u5411\u91cf\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7528 64bit \u53ef\u4ee5\u8868\u793a\uff0c\u4e8e\u662f\u786e\u5b9a\u4e0a\u754c \\(K=2^{64}\\) \u3002 </p> </li> </ul>"},{"location":"crypto/oven/#_1","title":"\u5c0f\u6280\u5de7","text":"<p>\u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0b\u6570\u636e\u91cf\u7684\u95ee\u9898\uff0c\u5982\u4f55\u77e5\u9053\u9700\u8981\u591a\u5c11\u7ec4\u6570\u636e\u53ef\u4ee5\u6062\u590d\u51fa FLAG \u5462\uff1f\u8fd9\u4e2a\u9700\u8981\u4f7f\u7528\u5230 gaussian heuristic \u4f30\u8ba1\u6700\u77ed\u5411\u91cf\u957f\u5ea6\uff0c\u8981\u6c42\u7684\u76ee\u6807\u5411\u91cf\u8303\u6570\u5c0f\u4e8e\u8fd9\u4e2a\u957f\u5ea6\u5373\u53ef\u3002\u3010\u4f46\u662f\u7531\u4e8e\u8fd9\u662fCTF\u6bd4\u8d5b\u80cc\u666f\uff0c\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u5148\u7528\u4e09\u56db\u4e94\u7ec4\u6570\u636e\uff0c\u5982\u679c\u4e0d\u884c\uff0c\u5728\u7528\u4e0a\u8ff0\u65b9\u6cd5\u7cbe\u786e\u8ba1\u7b97\u3002\u8fd9\u91cc\u6211\u5148\u6536\u96c6\u4e865\u7ec4\u6570\u636e\u5907\u7528\uff0c\u5b9e\u9645\u4e0a\u7528\u4e863\u7ec4\u6570\u636e\uff0c\u5c31\u53ef\u89e3\u51faFLAG\u3011\u3002</p>"},{"location":"crypto/oven/#3-exp","title":"3. EXP","text":"<p>\u5b8c\u6574EXP\uff08\u9700\u8981sage-python\u73af\u5883\uff09\uff1a</p> <pre><code>from Crypto.Util.number import *\nimport hashlib\n\ndef xor(a, b):\n    return bytes([i ^^ j for i, j in zip(a, b)]) // \u6ce8\u610f\u4f60\u7684sage\u73af\u5883\u7684\u5f02\u6216\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff0c\u8fd9\u4e2asage10.0\u7248\u672c\n\ndef custom_hash(n):\n    state = b\"\\x00\" * 16\n    for i in range(len(n) // 16):\n        state = xor(state, n[i : i + 16])\n\n    for _ in range(5):\n        state = hashlib.md5(state).digest()\n        state = hashlib.sha1(state).digest()\n        state = hashlib.sha256(state).digest()\n        state = hashlib.sha512(state).digest() + hashlib.sha256(state).digest()\n\n    value = bytes_to_long(state)\n\n    return value\n\n\n\ng = 2\n\nt, r, p, y = [0] * 5 , [0] * 5, [0] * 5, [0] * 5\nt[0] = 77203516334611379622052884088061339907818193440975523438325956774518601252973654146535129884349539724229562993644509567711307331031087898034347437358013492439542334272757402388064753335866738748958633246857368058563448192261648964749496750146315450540579452655462143813022469489449782882109182150142188348915\nr[0] = 116220687218790216091346463439819557695309512176282372943331613053767874084111192169275378671194392846117055362014832383093646731110903547936340541580638231783076185430700045752799252596702505486227877656990705143138976716233681199944248043915239678537679463030334043412573684866623347545004904612417007327217\np[0] = 120199526136097511651530856988060166616679725925744594620901500430819054365226668422844742178771316732438545888088210068701212930988908604238682153307940417480817112540019257024703372145496636861112290091005527647339212358159274475077103689996624113678044891963676612334769162753166782062809526104431258739517\ny[0] = 113120257926989954605307518460817169666869094087243249194566086300779837721481071230484420555504633839932263287201776945834030877253212748181186108770595676114564711457140738635967367144272960236148346810327070118837330648022676963528356209004524421455348155068637534190736042536625876773755044593606026293621\n\nt[1] = 41870694301936832255997763505666386906032641226067235004722895066736677752643938706563985367861597477876358530714740119529535551345537670465925209944735777464498665457291484991606280197421907773811941255514802343059520166452091324746732103649911088736843268706303230993742963740287185306251052313964374872878\nr[1] = 12006544761341621619143613218949584457040818188588282396732221317912350712975184254483346994199077889478797005980544401923303196850089656891130607887735812677733676744158835380723268515678724429529904080449565289532493612340517128773817940478185157405384294596975266141639161297056291778600404606940053392754\np[1] = 144976418899543143198454834264506179459614866666312385853989423989111679486891620786778481577472101748200328617607483446519049911023390427543308348494008425688855119367843479385647790189753163858970088620586505610840306212549243890107847423807556106192434514110736278569625282073529181653986405771513594134987\ny[1] = 115167386542298909971939136044531943159982371048242494889745996527683250097061534781946312891817534916886291355204474301571862159042350976750824212346443402817552375266223638549309886922860921533308382456941718605370216473858986207878047206914813902333192745354148659984602740644345120423788258359941122554440\n\nt[2] = 87583398382601313926735945950364130572816213989909728661491063393166341618362097121819023078210854251839415225428442334046015192711593400640556960974162962105001700930842075200923675422451049033428478754684678493480503204152097382431043129863362081278994409790477935899740897031656629902670114002180266872266\nr[2] = 102934065416140965550261549535302192284582871606378190882003659362832329206469482926448881926648454509204767788745574969527319053553977362277660636749471357711849435384231867496681956889560719871615670691536165668156919285052370364456208767031233707532145718791283351837119192545712583721765194876277656314501\np[2] = 148550372281025138704553107737801144273208690400094973764375300381759456124146034135721454543469874579375457504983315183916592877731262163382903701414433532933994780412246010260680217160047355295328211970740422311833479381733781665221952277321615395653804905426059251551309558237245071919868160643681548296643\ny[2] = 140198181685722792932050421128846820269664976993249152496309458637445728558822919357043381776927596511506695168631000635135982453895569864162220417018046902591680662347467431250148020323787868422484882819040766008876291088199475630773774170507517261352416744218315033367149608507518388781373699289693595499544\n\nt[3] = 84522638373733120165414722745998118253921972157096808350845007682435315263298662575419222718886673005893479175168776223733676055437884841441137160382376309254755315837431162807596684224207280410300146602535834124511928134257346386899792746556440632650091111389088724071203568000188430042064500145669267026805\nr[3] = 18194520459417696159241442307764982202112775710358263541565999857475375951014745782344717997571109484480490257320469370655821185611675102820226656623202547826938945675557174044055104570245311622199906030109190773202049867448625926033119474090713737736579814394048548084259404911639299693897437586858871472420\np[3] = 103592121279236435866010649601463899558315038309765463516665073413464806869884601040096405354399740035138081866812671953467986059509640644754973422603659825874707510675199511411437487386173194105311776020901134014680450244319046258962912483163270496586124101308664731409973532774829535980996775736651508448187\ny[3] = 14795900031448786771559087453548388682769488350377145090464794455644462363656204398769939585810191748312766604278524960492756615478207654208905403516432929452543777164921589629460212814049479518397521600744701463005793924336243982001830978693343863219168046923285752069874971698699611717027496799587761203398\n\nt[4] = 137831113158715069584199906447354477289195801883097400523644937444161950367086728510388467524069532778534704803863447302183665431906725284462350375136938902398115607751357373983532375894744842377064414618294084293556345908653608825144019924463160996581138334794345538184522294219836499291245958693984828705682\nr[4] = 3997479613798995088324714249284251759517244566415954213469045459939167234231804927756343425727094668124791771030709612850292188541459113635924389128360073088700133564458353848851347410209029075825332791761713207287049093830610503236793718093861017715600469118069736180200062407135030791797264421955154056362\np[4] = 138872772594377036406739890812487312629206229880091799534033353266413752242871671695030657233827552372256865312690361457743622953282647882392520626248323032818493170021525093526571072858177665184977821075559705014261503440906447428819858532553737164369106583570452357928945241596555378143414688075425304805029\ny[4] = 26528279589882510502916765470759890048295757018825608100058824483278181810141819962488106009190787416456734047325734614749916264837565765983213768504298640943869226245566784325431289650031372028094050672872660334951958006567067601586551947694563576820491204290496425885685101313332190690230962899252834723225\n\ni = 0\nC = [0]\nR = [0]\nwhile i &lt; 5:\n    C.append(custom_hash(long_to_bytes(g) + long_to_bytes(y[i]) + long_to_bytes(t[i])))\n    R.append(r[i])\n    i += 1\n\nC = C[1:]\nR = R[1:]\n# print(C)\n# print(R)\n\nM = matrix(ZZ, 5, 5)\nfor i in range(3):\n    M[i, i] = p[i]\n    M[3, i] = C[i]\n    M[4, i] = R[i]\n    M[i, 3] = M[i, 4] = 0\nM[3, 3] =  1\nM[4, 4] = 2^64\nM[3, 4]= 0\n\nv = M.LLL()[0]\nprint(v)\nflag = v[3] % p[3]\nprint(long_to_bytes(flag))\n</code></pre> <p>\u6700\u7ec8\u7684\u7ed3\u679c\u4e3a\uff1a <code>pctf{F1at_shAm1R_HNP_g0_Cr4ZyyYy_m0rE_1iK3_f4T_Sh4mIr}</code></p>"},{"location":"crypto/safeescrow/","title":"Crypto - SafeEscrow","text":"<ul> <li>0x00 Puzzle Description</li> <li>0x01 Analysis</li> </ul>"},{"location":"crypto/safeescrow/#0x00-puzzle-description","title":"0x00 Puzzle Description","text":"<p>Do you have knowledge about zero-knowledge proofs? You should have some.</p> <p>\u9898\u76ee\u8fde\u63a5\uff1ahttps://dreamhack.io/wargame/challenges/1297</p>"},{"location":"crypto/safeescrow/#0x01-analysis","title":"0x01 Analysis","text":"\u67e5\u770b\u5408\u7ea6\u6838\u5fc3\u6e90\u4ee3\u7801\ud83d\udc40 <pre><code>contract SafeEscrow {\n    bool public solved;\n\n    Verifier v;\n\n    constructor() {\n        v = new Verifier();\n    }\n\n    function withdraw(uint256[8] calldata proof) external {\n        uint256 Nullifier = 3631369181433719484956790922555555011136438559751492114283630303736666045113;\n        uint256 WalletIndex = 6453692159775602397386942979474506661254012100833066612593672063063229257634;\n        // wallet_address = 0x2dEc1802F473ffA1Fd162888C7a2bb08624867d5\n\n        uint256[2] memory publicInputs = [Nullifier, WalletIndex];\n        v.verifyProof(proof, publicInputs);\n        checkEmptyWallet(calculateAddress(WalletIndex));\n        _withdraw(proof, publicInputs);\n    }\n\n    function calculateAddress(uint256 walletIndex) internal pure returns (address targetWallet) {\n        targetWallet = address(bytes20(keccak256(abi.encodePacked(walletIndex))));\n    }\n\n    function checkEmptyWallet(address tw) internal view {\n        uint256 size;\n        assembly {\n            size := extcodesize(tw)\n        }\n\n        require(!(size == 0 &amp;&amp; address(tw).balance == 0));\n    }\n\n    function _withdraw(uint256[8] memory proof, uint256[2] memory pi) internal {\n        solved = true;\n    }\n}\n</code></pre> <p>\u9996\u5148\u67e5\u770b\u5408\u7ea6\u903b\u8f91\uff0c\u786c\u7f16\u7801\u4e86 <code>Nullifier, WalletIndex</code>\u4e24\u4e2a\u53c2\u6570\u503c\uff0c\u5e94\u8be5\u662f\u516c\u5171\u8f93\u5165\u3002\u5176\u4e2d <code>WalletIndex</code> \u662f\u5730\u5740\u7684 10 \u8fdb\u5236\u8868\u793a\uff0c\u5408\u7ea6\u4f1a\u5bf9\u8fd9\u4e2a\u5730\u5740\u8c03\u7528 <code>checkEmptyWallet</code> \u51fd\u6570\uff0c\u786e\u4fdd\u5176 balance \u4e0d\u4e3a 0\u3002</p> <p>\u5408\u7ea6\u903b\u8f91\u975e\u5e38\u7b80\u660e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6ee1\u8db3\uff1a</p> <ul> <li><code>WalletIndex</code> \u5730\u5740\u7684 balance \u4e0d\u4e3a 0\uff1b</li> <li>\u5411\u5408\u7ea6\u8f93\u5165\u4e00\u4e2a\u5408\u6cd5 proof \u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53bb\u67e5\u770bcircuit\u7684\u903b\u8f91\u7ed3\u6784\u3002</p> \u67e5\u770b\u7535\u8def\u6e90\u4ee3\u7801\ud83d\udc40 <pre><code>type Circuit struct {\n    Secret       frontend.Variable\n    Nullifier    frontend.Variable `gnark:\",public\"`\n    WalletIndex  frontend.Variable `gnark:\",public\"`\n    WalletSanity frontend.Variable\n}\n\nfunc (circuit *Circuit) Define(api frontend.API) error {\n    api.AssertIsEqual(api.Mul(api.Mul(api.Mul(api.Mul(circuit.Secret, circuit.Secret), circuit.Secret), circuit.Secret), circuit.Secret), circuit.Nullifier)\n    api.AssertIsEqual(api.Mul(circuit.Secret, circuit.WalletIndex), circuit.Nullifier)    // wallet index\n    api.AssertIsEqual(api.Add(circuit.WalletIndex, circuit.WalletSanity), circuit.Secret) // wallet index / sanity check\n    return nil\n}\n</code></pre> <p>\u7535\u8def\u903b\u8f91\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4ee5\u4e0b\u7b49\u5f0f\uff1a</p> \\[ \\begin{aligned} &amp;secret ^ 5 = nullifier \\\\ &amp;secret * wallet\\_index = nullifier \\\\ &amp;wallet\\_index = wallet\\_sanity = secret \\end{aligned} \\] <p>\u4e00\u5171\u56db\u4e2a\u672a\u77e5\u6570\uff0c\u4f46\u4ece\u5408\u7ea6\u4e2d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5176\u4e2d\u4e24\u4e2a\u672a\u77e5\u6570 <code>wallet_index, nullifier</code>\u3002\u4e09\u4e2a\u7b49\u5f0f\u89e3\u4e24\u4e2a\u672a\u77e5\u6570\uff1a</p> <pre><code>from Crypto.Util.number import inverse\nnullifier = 3631369181433719484956790922555555011136438559751492114283630303736666045113\nwi = 6453692159775602397386942979474506661254012100833066612593672063063229257634\nfr = 21888242871839275222246405745257275088548364400416034343698204186575808495617\ninv = inverse(wi, fr)\n\nsecret = inv * nullifier % fr\nprint(secret)\n\nassert(pow(secret, 5, fr) == nullifier)\n\nws = (secret - wi) % fr\nprint(ws)\n</code></pre> <p>\u5f97\u5230\u9690\u79c1\u8f93\u5165\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 gnark \u751f\u6210 proof \uff0c\u8fd9\u4e5f\u8bb8\u662f\u6574\u4e2a\u9898\u76ee\u4e2d\u6700\u96be\u5199\u7684part\uff1a</p> <pre><code>func main() {\n    fpSize := 4 * 8\n\n    var circuit Circuit\n    vkBytes, err := os.ReadFile(\"./verifying.key\")\n    if err != nil {\n        panic(err)\n    }\n\n    vk := groth16.NewVerifyingKey(ecc.BN254)\n    vk.ReadFrom(bytes.NewReader(vkBytes))\n\n    file, err := os.Create(\"verifier.sol\")\n    if err != nil {\n        panic(err)\n    }\n    defer file.Close()\n    err = vk.ExportSolidity(file)\n    if err != nil {\n        panic(err)\n    }\n\n    // 1. get R1CS\n    r1cs, err := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &amp;circuit)\n    if err != nil {\n        panic(err)\n    }\n\n    // print R1CS\n    internal, secret, public := r1cs.GetNbVariables()\n    fmt.Printf(\"public, secret, internal %v, %v, %v\\n\", public, secret, internal)\n\n    // 2. get pk\n    pkFile, err := os.ReadFile(\"proving.key\")\n    if err != nil {\n        panic(err)\n    }\n    pk := groth16.NewProvingKey(ecc.BN254)\n    pk.ReadFrom(bytes.NewReader(pkFile))\n\n    // 3. build witness\n    assignment := Circuit{\n        Secret:       \"10577078978341052228994623870320872030440906461492423559009608430703\",         // \u8bbe\u7f6e Secret \u53d8\u91cf\n        Nullifier:    \"3631369181433719484956790922555555011136438559751492114283630303736666045113\", // \u8bbe\u7f6e Nullifier \u53d8\u91cf\n        WalletIndex:  \"6453692159775602397386942979474506661254012100833066612593672063063229257634\", // \u8bbe\u7f6e WalletIndex \u53d8\u91cf\n        WalletSanity: \"15434550722640751803200514994777392297615224330023874192596955682522187668686\"}\n    witness, _ := frontend.NewWitness(&amp;assignment, ecc.BN254.ScalarField())\n    publicWitness, _ := witness.Public()\n    fmt.Println(\"Public: \", publicWitness)\n\n    // \u6301\u4e45\u5316\n    pubWitFile, err := os.Create(\"publicWitness.json\")\n    // assert.NoError(err)\n    defer pubWitFile.Close()\n\n    data := fmt.Sprint(publicWitness.Vector())\n    fmt.Printf(\"public wit: %v\\n\", data)\n    _, err = pubWitFile.WriteString(data)\n    // assert.NoError(err)\n\n    // prove\n    proof, err := groth16.Prove(r1cs, pk, witness)\n    bn254proof := proof.(*groth16_bn254.Proof)\n    fmt.Printf(\"%+v\\n\", bn254proof.MarshalSolidity())\n    if err != nil {\n        panic(err)\n    }\n    // proofPath := fmt.Sprintf(\"proof\")\n    // proofFile, _ := os.OpenFile(proofPath, os.O_CREATE|os.O_WRONLY, 0666)\n    // defer proofFile.Close()\n    // proof.WriteTo(proofFile)\n\n    // proof[i] = new(big.Int).SetBytes(proofBytes[fpSize*i : fpSize*(i+1)])\n\n    // 5. verify-1\n    err2 := groth16.Verify(proof, vk, publicWitness)\n    if err2 != nil {\n        panic(err2)\n    }\n    fmt.Println(\"Gnark Verified!\")\n\n    // 6. verify-2\n    // proofBytes, err := hex.DecodeString(string(bn254proof.MarshalSolidity()))\n    proofBytes := bn254proof.MarshalSolidity()\n    if len(proofBytes) != fpSize*8 {\n        panic(\"proofBytes != fpSize*8\")\n    }\n    // checkErr(err, \"decode proof hex failed\")\n\n    var final_proof [8]*big.Int\n\n    // proof.Ar, proof.Bs, proof.Krs\n    for i := 0; i &lt; 8; i++ {\n        final_proof[i] = new(big.Int).SetBytes(proofBytes[fpSize*i : fpSize*(i+1)])\n    }\n    fmt.Printf(\"final_proof: %v\\n\", printGroth16Proof(final_proof))\n\n}\n\nfunc printGroth16Proof(proof [8]*big.Int) string {\n    strs := make([]string, len(proof))\n\n    // \u5c06\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2abig.Int\u5143\u7d20\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    for i, num := range proof {\n        strs[i] = num.String()\n    }\n\n    result := strings.Join(strs, \",\")\n\n    return \"[\" + result + \"]\"\n}\n</code></pre> <p>\u4ee3\u7801\u8f93\u51fa\u4e86\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9\u5408\u7ea6\u7684\u6570\u7ec4\u5f62\u5f0f\u3002</p> <pre><code>[8099153543188745508175831438214699454316597283777416373805285378337894635219, 4752283743648249369871703999591739156697179853430237160185953056683691919040, 3672793038585677738256671951490594097269506939888886853074694423123390129322, 14595975645544950832872828444328013359931446076397165248168461021684756054536, 18094993552006574819160086020644554537527958371006997742353144028933191486115, 1931243151356508693977569118323975116222139982223999685371150925902773089898, 19765490139519166876225668675861823609972368815565063303605763659883139179045, 11442623890359346105849251388097905454073958723760352904628113343002100881590]\n</code></pre> <p>\u6700\u540e\u4f7f\u7528 web3py \u5de5\u5177\u5199\u5408\u7ea6\u4ea4\u4e92\u811a\u672c\u5373\u53ef\u3002\uff08\u522b\u5fd8\u4e86\u7ed9\u90a3\u4e2a\u5730\u5740\u5148\u5145\u503c\u4e00\u70b9eth\uff0c\u8fd9\u662f\u9898\u76ee\u7684\u7b2c\u4e00\u4e2a\u8981\u6c42\uff09\u3002</p> <p>\u6211\u81ea\u5df1\u5728 S \u7f51\u90e8\u7f72\u4e86\u4e00\u4e2a\u5408\u7ea6\u6d4b\u8bd5\uff0c\u6700\u540e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 cast \u5de5\u5177\u67e5\u770b\u662f\u5426 solved\uff1a</p> <pre><code>cast call 0x0bde4e8bdb83bd29f073c72709daf1e07036e394 \"solved()\" --rpc-url https://eth-sepolia.g.alchemy.com/v2/your_api_key\n</code></pre> <p>\u8fd4\u56de\u7ed3\u679c\uff1a <code>0x0000000000000000000000000000000000000000000000000000000000000001</code>.</p> <p>Done!</p>"},{"location":"crypto/2%2B2%3D5/two_plus_two/","title":"Jolt zkVM - 2+2=5","text":"<ul> <li>1. Background</li> <li>2. Puzzle Description</li> <li>3. Alynasis</li> <li>4. EXP</li> </ul>"},{"location":"crypto/2%2B2%3D5/two_plus_two/#1-background","title":"1. Background","text":"<p>Jolt \u662f\u7531 A16Z \u7684\u5bc6\u7801\u5b66\u5bb6\u4eec\u63d0\u51fa\u7684\u4e00\u4e2a\u9488\u5bf9 Risc-V ISA \uff08\u672a\u6765\u5c06\u652f\u6301\u66f4\u591aISA\uff09\u7684 zkVM \u6846\u67b6\uff0c\u5b83\u5e95\u5c42\u4f7f\u7528\u4e86 sumcheck-based SNARK\uff0c\u8fd9\u4e2a SNARK \u5145\u5206\u5229\u7528\u591a\u53d8\u91cf\u591a\u9879\u5f0f\u53ca\u5176\u591a\u9879\u5f0f\u627f\u8bfa\u7684\u4f18\u52bf\u3002Jolt zkVM \u636e\u8bf4\u62e5\u6709\u975e\u5e38\u51fa\u8272\u7684\u6027\u80fd\u8868\u73b0\u5e76\u4e14\u8fd8\u5b58\u5728\u4f18\u5316\u7a7a\u95f4\u3002</p> <p>\u9996\u5148\u9700\u8981\u4e86\u89e3 Jolt zkVM \u67b6\u6784\uff0c\u5206\u4e3a 4 \u4e2a\u7ec4\u4ef6\u3002\u4e00\u4e2a Virtual Machine\uff08VM\uff09\u5b9e\u8d28\u4e0a\u662f\u505a\u4e24\u4e2a\u4e8b\u60c5\uff1a - \u91cd\u590d\u5730\u6267\u884c\u201c\u53d6\u6307-\u8bd1\u7801-\u6267\u884c\u201c\u903b\u8f91\uff08\u4e5f\u53eb instruction cycle\uff09\u3002\u6307\u4ee4\u7531 ISA \u5b9a\u4e49 - \u8bfb\u5199 RAM</p> <p></p> <p>\u7ed3\u5408 Jolt \u8bba\u6587\u4e2d\u7684\u56fe\u793a\uff0c\u53ef\u4ee5\u770b\u5230\uff1aCPU \u4ece\u4e00\u4e2a\u72b6\u6001 \\(state_i\\)\uff0c\uff08\u7ed3\u5408 PC\uff09\u4ecestorage \u4e2d\u8bfb\u53d6\u7a0b\u5e8f\u4ee3\u7801\u7684\u6307\u4ee4\uff0c\u8bfb\u53d6\u6e90\u5bc4\u5b58\u5668\u7684\u503c\u751a\u81f3\u8bfb\u5199 memory\uff0c\u7136\u540e\u901a\u8fc7 lookup query \u8bd1\u7801\u6267\u884c\u8fd4\u56de\u7ed3\u679c\uff0c\u6700\u7ec8\u628a\u7ed3\u679c\u5199\u5230\u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u66f4\u65b0\u5230CPU\u72b6\u6001\u4e3a \\(CPU_{i+1}\\) \u3002</p> <p>\u5176\u4e2d\uff1a - \u8bfb\u5199 storage\uff0cregs\uff0cmemory \u4e2d\u7684\u6570\u636e\u9700\u8981\u7528\u5230 offline memory checking. - \u8bd1\u7801\u6267\u884c\u9700\u8981\u4f7f\u7528 lasso - \u524d\u4e24\u8005\u751f\u6210\u7684\u7ea6\u675f\u8868\u793a\u4e3a R1CS \u5f62\u5f0f\uff0c\u7136\u540e\u8bc1\u660e\u3002</p> <p>\u5728 Jolt \u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u628a storage \u4e2d\u5b58\u653e\u7684\u5b57\u8282\u7801\u6307\u4ee4\uff08\u53ea\u8bfb\uff09 \u4e0e regs \u548c memory \u4e2d\u5b58\u653e\u7684\u6570\u636e\uff08\u53ef\u8bfb\u5199\uff09 \u5206\u79bb\u5f00\uff0c\u56e0\u800c\u6784\u6210\u4e86\u56db\u5927\u7ec4\u4ef6\u3002</p> <p></p> <ul> <li>\u5b57\u8282\u7801\uff1a\u4e5f\u5c31\u662f\u7a0b\u5e8f\u6307\u4ee4\uff0c\u4f7f\u7528 read-only memory checking argument \u8bc1\u660e</li> <li>\u8bfb\u5199\u5185\u5b58\uff1a\u4f7f\u7528 memory checking argument \u53bb\u8bc1\u660e\u8bfb\u5199\u5185\u5b58\u7684\u6b63\u786e\u6027\u3002\u5bf9\u4e8e register\uff0cJolt \u5c06\u5176\u5b9e\u73b0\u4e3a\u5728\u7279\u6b8a\u5730\u5740\u7684\u5185\u5b58\u3002</li> <li>\u6307\u4ee4\u67e5\u8be2\uff1a\u5728\u6267\u884c\u6307\u4ee4\u65f6\uff0c\u4f7f\u7528\u4e00\u79cd\u540d\u4e3a Lasso \u7684 lookup argument \u8bc1\u660e</li> <li>R1CS\uff1a\u4ee5\u4e0a\u6240\u6709\u7684 instruction cycle \u90fd\u9700\u8981\u6ee1\u8db3 R1CS \u7ea6\u675f\u3002\u5b83\u4f5c\u4e3a\u4e00\u79cd\u7c98\u5408\u5242\uff0c\u53ef\u4ee5\u4e3a\u8de8\u7ec4\u4ef6\u7684\u6570\u636e\u65bd\u52a0\u7ea6\u675f\u3002</li> </ul> <p>Jolt zkVM \u7684\u4f7f\u7528\u4e0e RISC0 \u7684 zkVM \u7c7b\u4f3c\uff0c\u90fd\u662f\u4f7f\u7528 guest program \u6765\u8868\u793a\u6b32\u8bc1\u660e\u7684 computation\uff0chost program \u5219\u662f\u8fd0\u884c zkVM \u7684\u7a0b\u5e8f\uff0c\u901a\u8fc7 host program \u6211\u4eec\u53ef\u4ee5\u5229\u7528 jolt_sdk \u6765\u4e3a guest program \u7684\u6b63\u786e\u8fd0\u884c\u751f\u6210\u8bc1\u660e\uff0cguest program \u7684\u8f93\u5165\u4e5f\u662f\u5728 host program \u4e2d\u6784\u9020\u5e76\u4f20\u9012\u7684\u3002</p>"},{"location":"crypto/2%2B2%3D5/two_plus_two/#2-puzzle-description","title":"2. Puzzle Description","text":"<p>Attachments</p> <p>\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 diff.patch\n\u251c\u2500\u2500 jolt\n\u251c\u2500\u2500 readme.txt\n\u2514\u2500\u2500 server\n</code></pre> <p>\u5148\u770b readme\uff1a</p> <pre><code># Author: @gio-d3141\n# Dockerfile should build fine (will take a while) but the setup is kind of cursed, DM me if necessary\n\ngit clone git@github.com:a16z/jolt.git\ncd jolt\n\n# just the latest commit at time of writing\ngit checkout 0cc7aa31981ff8503fe256706d2aa9c320abd1cd\ngit apply ../diff.patch\n</code></pre> <p>\u8fd9\u4e2a\u9898 clone \u4e86 jolt \u5e93\uff0c\u5e76\u6253\u4e86\u4e00\u4e2a patch\uff0c\u8865\u4e01\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>diff --git a/jolt-core/src/r1cs/jolt_constraints.rs b/jolt-core/src/r1cs/jolt_constraints.rs\nindex 5fb0d871..295dce32 100644\n--- a/jolt-core/src/r1cs/jolt_constraints.rs\n+++ b/jolt-core/src/r1cs/jolt_constraints.rs\n@@ -289,13 +289,8 @@ impl&lt;F: JoltField&gt; R1CSConstraintBuilder&lt;F&gt; for UniformJoltConstraints {\n\n         // if (rd != 0 &amp;&amp; update_rd_with_lookup_output == 1) constrain(rd_val == LookupOutput)\n         // if (rd != 0 &amp;&amp; is_jump_instr == 1) constrain(rd_val == 4 * PC)\n-        let rd_nonzero_and_lookup_to_rd =\n+        let _rd_nonzero_and_lookup_to_rd =\n             cs.allocate_prod(JoltIn::Bytecode_RD, JoltIn::OpFlags_LookupOutToRd);\n-        cs.constrain_eq_conditional(\n-            rd_nonzero_and_lookup_to_rd,\n-            JoltIn::RD_Write,\n-            JoltIn::LookupOutput,\n-        );\n         let rd_nonzero_and_jmp = cs.allocate_prod(JoltIn::Bytecode_RD, JoltIn::OpFlags_IsJmp);\n         let lhs = JoltIn::Bytecode_ELFAddress + (PC_START_ADDRESS - PC_NOOP_SHIFT);\n         let rhs = JoltIn::RD_Write;\n</code></pre> <p>\u5b83\u53d8\u52a8\u4e86 <code>rd_nonzero_and_lookup_to_rd</code> \u7684\u5185\u5bb9\uff0c\u5177\u4f53\u662f\u5220\u9664\u4e86\uff1a</p> <pre><code>-        cs.constrain_eq_conditional(\n-            rd_nonzero_and_lookup_to_rd,\n-            JoltIn::RD_Write,\n-            JoltIn::LookupOutput,\n-        );\n</code></pre> <p>git \u5f88\u597d\u5730\u5e2e\u6211\u4eec\u5b9a\u4f4d\u5230\u4e86\u6240\u4fee\u6539\u7684\u6587\u4ef6 <code>jolt/src/r1cs/jolt_constraints.rs</code> \u7b2c 292 \u884c\u3002</p> <p>\u9644\u4ef6\u8fd8\u7ed9\u51fa\u4e86 host \u4e2d\u8981\u8fd0\u884c\u7684 guest \u7a0b\u5e8f\u4ee3\u7801\uff1a</p> <pre><code>#![cfg_attr(feature = \"guest\", no_std)]\n#![no_main]\n\n#[jolt::provable]\nfn two_plus_two() -&gt; u16 {\n    let mut n: u16 = 2;\n\n    #[cfg(any(target_arch = \"riscv32\", target_arch = \"riscv64\"))]\n    unsafe {\n        core::arch::asm!(\n            \"li {n}, 2\",\n            \"add {n}, {n}, {n}\",\n            n = inout(reg) n,\n        );\n    }\n\n    #[cfg(target_arch = \"x86_64\")]\n    unsafe {\n        core::arch::asm!(\n            \"mov {n}, 2\",\n            \"add {n}, {n}, {n}\",\n            n = inout(reg) n,\n        );\n    }\n    n\n}\n</code></pre> <p>\u51fa\u9898\u4eba\u7684\u610f\u56fe\u5e94\u8be5\u5728\u4e8e\u5229\u7528\u4fee\u6539\u4e4b\u540e\u7684 jolt \u5e93\u6765\u8bc1\u660e 2 + 2 = 5.</p>"},{"location":"crypto/2%2B2%3D5/two_plus_two/#3-alynasis","title":"3. Alynasis","text":"<p>\u6211\u4eec\u9700\u8981\u6df1\u5165\u7406\u89e3 jolt zkVM \u7684 R1CS \u8bbe\u8ba1\u3002</p> <p>jolt \u7684 R1CS \u90e8\u5206\u662f\u901a\u7528\u7684\u7ec4\u4ef6\uff0c\u610f\u5473\u7740\u5b83\u9002\u7528\u4e8e\u6bcf\u4e00\u4e2a CPU step \uff08\u4e5f\u5c31\u662f\u201c\u53d6\u6307-\u8bd1\u7801-\u6267\u884c\u201d\u7684 instruction cycle\uff09\uff0c\u6bcf\u4e00\u4e2a step \u53ea\u9700\u8981\u63a5\u8fd1 60 \u4e2a\u7ea6\u675f\u548c 80 \u4e2a\u53d8\u91cf\u3002</p> <p>\u6bcf\u4e00\u4e2a CPU step \u9700\u8981\u7684\u8f93\u5165\u6709\uff1a</p> <ul> <li>\u5b57\u8282\u7801\u76f8\u5173\uff08\u53ea\u8bfb\uff09\uff1a</li> <li>bytecode read address: \u8fd9\u4e00\u6b65\u4e2d\u6240\u9700\u8981\u53d6\u51fa\u7684\u6307\u4ee4\u7684 idx</li> <li>\u9884\u5904\u7406\u4e4b\u540e\u7684\u6307\u4ee4\u8868\u793a\uff1a<code>(elf_address, bitflags, rs1, rs2, rd, imm)</code></li> <li>\u8bfb\u5199\u5185\u5b58\u76f8\u5173\uff1a</li> <li>\u6307\u4ee4\u6240\u9700\u8981\u8bfb\u5199\u7684\u5185\u5b58\u5730\u5740\uff0c\u5982\u679c\u4e0d\u662f\u4e00\u4e2a load/store \u6307\u4ee4\uff0c\u5219\u7f6e 0.</li> <li>\u5185\u5b58\u4e2d\u8bfb\u5199\u7684\u5b57\u8282</li> <li>\u6307\u4ee4 lookup\uff08\u6267\u884c\uff09\u76f8\u5173\uff1a</li> <li>\u6307\u4ee4\u64cd\u4f5c\u6570 <code>x</code> \u548c <code>y</code> \u7684 chunks</li> <li>lookup query. \u4e00\u822c\u662f\u64cd\u4f5c\u6570\u7684\u7ed3\u5408</li> <li>lookup output.</li> </ul> <p>\u5355\u770b patch \u6240\u4fee\u6539\u7684\u90a3\u4e2a\u53d8\u91cf\u540d\uff0c\u53ef\u77e5\uff1a\u5b83\u7ea6\u675f\u4e86 rd\uff08\u76ee\u7684\u5bc4\u5b58\u5668\uff09\u975e 0 \u4e14 rd \u7684\u503c\u4e0e lookup \u7684 output \u76f8\u7b49\u3002\u4ece\u4e0a\u9762\u7684\u6ce8\u91ca\u4e5f\u89e3\u91ca\u4e86\u8fd9\u4e00\u70b9\uff1a</p> <pre><code> // if (rd != 0 &amp;&amp; update_rd_with_lookup_output == 1) constrain(rd_val == LookupOutput)\n\n ...\n cs.constrain_eq_conditional(\n    rd_nonzero_and_lookup_to_rd,\n    JoltIn::RD_Write,\n    JoltIn::LookupOutput,\n);\n...\n</code></pre> <p><code>cs.constrain_eq_conditional</code> \u76ee\u7684\u662f\u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a 1\uff0c\u5219\u7b2c\u4e8c\u3001\u4e09\u4e2a\u53c2\u6570\u5fc5\u987b\u76f8\u7b49\u3002<code>JoltIn::RD_Write</code> \u8fd9\u4e2a\u503c\u6765\u81ea\u4e8e\u8bfb\u5199\u5185\u5b58\u6a21\u5757\uff0c\u8868\u793a\u5199\u5165\u76ee\u7684\u5bc4\u5b58\u5668\u7684\u503c\uff0c<code>JoltIn::LookupOutput</code> \u8fd9\u4e2a\u503c\u6765\u81ea\u6307\u4ee4\u6267\u884c\u6a21\u5757\uff0c\u8868\u793a\u6307\u4ee4 lookup \u67e5\u8be2\u540e\u8fd4\u56de\u7684\u7ed3\u679c\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u8865\u4e01\u5220\u9664\u4e86\u8fd9\u6761\u7ea6\u675f\u540e\uff0czkVM\u5c06\u4e0d\u518d\u68c0\u67e5 rd \u7684\u8f93\u51fa\u4e0e lookup \u7684\u4e00\u81f4\u6027\uff0c\u56e0\u6b64\u5bfc\u81f4\u6f0f\u6d1e\u3002\u4e5f\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 <code>2 + 2 = 5</code> \u7684\u8bc1\u660e\u3002</p>"},{"location":"crypto/2%2B2%3D5/two_plus_two/#4-exp","title":"4. EXP","text":"<p>\u5728\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u9700\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\uff1a</p> <ol> <li>\u4fee\u6539\u52a0\u6cd5\u6307\u4ee4\u7684\u903b\u8f91\uff0c\u4f7f\u5f97 <code>2 + 2 = 5</code></li> <li>\u8c03\u7528 jolt_sdk \u751f\u6210 proof</li> </ol> <p>\u5bf9\u4e8e\u7b2c\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 <code>jolt/tracer/src/emulator/cpu.rs</code>\u3002\u8fd9\u662f jolt \u7684 tracer \u6a21\u5757\uff0c\u7528\u4e8e\u6a21\u62df CPU \u751f\u6210 execution trace\u3002</p> <pre><code>    Instruction {\n        mask: 0xfe00707f,\n        data: 0x00000033,\n        name: \"ADD\",\n        operation: |cpu, word, _address| {\n            let f = parse_format_r(word);\n            cpu.x[f.rd] = cpu.sign_extend(cpu.x[f.rs1].wrapping_add(cpu.x[f.rs2] + 1));\n            Ok(())\n        },\n        disassemble: dump_format_r,\n        trace: Some(trace_r),\n    },\n</code></pre> <p>\u5982\u4e0a\uff0c\u6211\u628a\u5176\u4e2d\u4e00\u4e2a\u6e90\u5bc4\u5b58\u5668\u52a0 1\uff0c\u5373\u53ef\u5f97\u5230 <code>2 + 2 = 5</code>\u3002\uff08\u53ea\u8981\u80fd\u591f\u4f7f\u5f97 2+2=5 \u903b\u8f91\u6210\u7acb\u90fd\u53ef\uff09\u3002</p> <p>\u5728 host program \u4e2d\u6253\u5370 output \u5e76\u751f\u6210 proof \u5373\u53ef\u3002</p> <p>\u5b8c\u6574\u4ee3\u7801\uff1a\u89c1 code \u6587\u4ef6\u5939.</p>"},{"location":"crypto/double-trouble/zkhack-double-trouble-main/","title":"Index","text":""},{"location":"crypto/double-trouble/zkhack-double-trouble-main/#zkhack-double-trouble","title":"zkhack-double-trouble","text":"<p>DO NOT FORK THE REPOSITORY, AS IT WILL MAKE YOUR SOLUTION PUBLIC. INSTEAD, CLONE IT AND ADD A NEW REMOTE TO A PRIVATE REPOSITORY, OR SUBMIT A GIST</p>"},{"location":"crypto/double-trouble/zkhack-double-trouble-main/#trying-it-out","title":"Trying it out","text":"<p>Use <code>cargo run --release</code> to see it in action</p>"},{"location":"crypto/double-trouble/zkhack-double-trouble-main/#submitting-a-solution","title":"Submitting a solution","text":"<p>Submit a solution</p>"},{"location":"crypto/double-trouble/zkhack-double-trouble-main/#puzzle-description","title":"Puzzle description","text":"<pre><code>Bob has developed a new zero-knowledge inner-product proof allows proving that\nthe inner product of a hidden, committed vector `a` with a public vector `b`\nequals the claimed value `v` that is committed. He's released the protocol\nlicense-free below, but still wants to profit from his invention. So, he\ndeveloped a proprietary prover that he claims is 2x faster than the standard one\ndescribed below, but without sacrificing zero-knowledge: it still hides all\ninformation about the committed vector `a`. To back up his claim, he has\npublished a few proofs generated by this proprietary prover for the same `a` but\nwith respect to possibly different `b` vectors, and has challenged people to recover `a`\nfrom just these proofs.\n\nCan you rise to the challenge and recover the vector `a`?.\n\n\nThe inner-product proof is obtained by applying the Fiat--Shamir transform to the following sigma protocol:\n\nBefore proof:\nDuring proof of inner product with public vector b:\n        Prover                                           Verifier\n=================================================================================================\nOffline phase (before `b` is available):\n1. Prover computes \n    C_a := PedersenCOMM(a; \u03b1) \n         = sum_i (a_i * G_i) + \u03b1 * H\n    where G_i and H are random group elements, \n    and s is sampled randomly.\n                            --------- C_a ----------&gt;\n\nOnline phase for a given public vector `b` (can be repeated for different `b`s):\n\n1. Prover samples a random vector r\n    and random elements \u03c1, \u03c4, \u03c5.\n2. Prover computes \n    C_r := PedersenCOMM(r; \u03c1)\n    C_1 := PedersenCOMM(&lt;a, b&gt;; \u03c4) // &lt;x, y&gt; denotes inner product of x and y.\n    C_2 := PedersenCOMM(&lt;r, b&gt;; \u03c5)\n                            ---- C_r, C_1, C_2 -----&gt;\n                            &lt;- random challenge \u03b3 ---\n3. Prover computes \n    s := a + \u03b3r,\n    u := \u03b1 + \u03b3\u03c1\n    t := \u03c4 + \u03b3\u03c5,\n                            -------- s, u, t -------&gt;\n                                                // Check that `s` really is a + \u03b3r,\n                                                Check PedersenCOMM(s; u) = C_a + \u03b3C_r\n                                                // Check that the inner product is committed in C_1.\n                                                Check PedersenCOMM(&lt;s, b&gt;; t) = C_1 + \u03b3C_2\n==================================================================================================\n</code></pre>"},{"location":"crypto/group-dynamics/group-dynamics/","title":"Crypto - Group Dynamics","text":"<ul> <li>1. Puzzle Description</li> <li>2. Preliminery<ul> <li>Chinese Reminder Theorem</li> <li>Groth16 Trusted Setup</li> <li>Prime Order Subgroups and Elliptic Curve Cofactors<ul> <li>\u4f8b\u5b50</li> </ul> </li> <li>Pohlig-Hellman Algorithm<ul> <li>Babystep-Giantstep Algorithm</li> <li>Pohlig-Hellman Algorithm</li> <li>\u4f18\u5316</li> </ul> </li> </ul> </li> <li>3. Solution</li> </ul>"},{"location":"crypto/group-dynamics/group-dynamics/#1-puzzle-description","title":"1. Puzzle Description","text":"<p>If it's small, it should not be here</p> <p>Alice has computed a trusted setup for a Groth16 proof scheme. She decided to use a 128-bit long secret, and she swears that she does not know the secret s needed to get this setup. The trusted setup is constructed as follows using two additional scalars \\(\\alpha\\) and \\(\\beta\\): * \\([s^i] G_1\\)  for \\(0 \\le i \\le 62\\), * \\([\\alpha s^i] G_1\\)  for \\(0 \\le  i \\le  31\\), * \\([\\beta s^i] G_1\\)  for \\(0 \\le  i \\le  31\\), * \\([s^i] G_2\\)  for \\(0 \\le  i \\le  31\\).</p>"},{"location":"crypto/group-dynamics/group-dynamics/#2-preliminery","title":"2. Preliminery","text":""},{"location":"crypto/group-dynamics/group-dynamics/#chinese-reminder-theorem","title":"Chinese Reminder Theorem","text":"<p>\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08CRT\uff09\u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u6c42\u89e3\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u7b97\u6cd5\u3002</p> <p>\u7ed9\u5b9a\u4e00\u5143\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\uff08\u5176\u4e2d\u6a21\u6570\u4e24\u4e24\u4e92\u8d28\uff09\uff1a</p> \\[ \\begin{cases} x\\equiv a_1\\pmod{n_1}\\\\ x\\equiv a_2\\pmod{n_2}\\\\ \\dots\\\\ x\\equiv a_k\\pmod{n_k} \\end{cases} \\] <p>\u7b97\u6cd5\u6d41\u7a0b\uff1a</p> <ol> <li>\u9996\u5148\u8ba1\u7b97\u6240\u6709\u6a21\u6570\u4e58\u79ef \\(n=n_1 n_2\\dots n_k\\)</li> <li>\u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u65b9\u7a0b:</li> </ol> <p>a. \\(m_i=\\frac{n}{n_i}\\)</p> <p>b. \u8ba1\u7b97 \\(m_i\\) \u5728\u6a21 \\(n_i\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143 \\(m_i^{-1}\\)</p> <ol> <li>\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e3a\uff1a \\(x=\\sum_{i=1}^k{a_im_i m_i^{-1}}\\pmod{n}\\)</li> </ol> <p>\u8fd9\u4e2a\u7b97\u6cd5\u7684 intuition \u662f\uff1a\u8ba9\u6c42\u548c\u7684\u6bcf\u4e00\u9879\u53ea\u8ba9\u5176\u5728\u6a21 \\(n_i\\) \u65f6\u53d6 \\(a_i\\)\uff0c\u8ba9\u6bcf\u4e00\u9879\u5728\u6a21 \\(n_j(j\\ne i)\\) \u65f6\u7b49\u4e8e \\(0\\)\u3002 \\(m_i m_i^{-1}\\) \u7684\u610f\u4e49\u5c31\u662f\u6ee1\u8db3\u4e86\u8fd9\u79cd intuition\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u662f \\(k\\) \u6b21\u6c42\u9006\u5143\uff1a \\(O(k\\log n)\\)</p>"},{"location":"crypto/group-dynamics/group-dynamics/#groth16-trusted-setup","title":"Groth16 Trusted Setup","text":"<p>Groth16 \u662f\u4e00\u4e2a\u975e\u5e38\u6709\u540d\u7684 zkSNARK \u534f\u8bae\uff0c\u4ee5\u5176\u7b80\u77ed\u7684 proof size \u548c\u5feb\u901f\u7684 verification time \uff08\u5747\u4e0e\u7535\u8def\u89c4\u6a21\u65e0\u5173\uff09\u88ab\u7528\u4e8e\u5404\u79cd\u5c0f\u89c4\u6a21\u7535\u8def\u573a\u666f\u3002</p> <p>\u4e3a\u4e86\u5b9e\u73b0\u4e0a\u8ff0\u4f18\u52bf\uff0cGroth16 \u9700\u8981\u8fdb\u884c\u4e00\u4e2a Trusted Setup \u6765\u751f\u6210\u4e00\u4e9b\u53c2\u6570\u4f9b Prover \u548c Verifier \u4f7f\u7528\u3002\u4e4b\u6240\u4ee5\u53eb Trusted \uff0c\u610f\u601d\u662f\u8fd9\u4e9b\u53c2\u6570\u4e2d\u5b58\u5728\u4e00\u4e2a\u9677\u95e8 trapdoor\uff0c\u8fd9\u4e2a\u79d8\u5bc6\u503c\u4e0d\u80fd\u8ba9\u4efb\u4f55\u4eba\u77e5\u9053\uff0c\u5426\u5219\u6574\u4e2a\u534f\u8bae\u5c06\u6ca1\u6709\u4efb\u4f55\u5b89\u5168\u6027\uff0c\u6076\u610f\u7684\u8bc1\u660e\u8005\u53ef\u4ee5\u4e3a\u865a\u5047\u7684 claim \u4f2a\u9020\u8bc1\u660e\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a bad trusted setup \u5c06\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u6781\u4e0d\u5b89\u5168\u7684\u534f\u8bae\u3002</p> <p>Groth16 Trusted Setup \u7684\u5b89\u5168\u6027\u57fa\u4e8e\u7fa4\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898\uff08Discrete Logarithm Problem, DLP\uff09\uff0c\u5373\u7ed9\u5b9a\u4e24\u4e2a\u7fa4\u5143\u7d20 \\((g, g^s)\\in \\mathbb{G}\\)\uff0c\u8ba1\u7b97\u51fa \\(s\\) \u662f\u56f0\u96be\u7684\u3002\u672c\u6587\u4f7f\u7528\u4e58\u6cd5\u8bb0\u53f7 \\(g^s\\) \u6765\u8868\u793a\u7fa4\u7684\u8fd0\u7b97\uff0c\u9898\u9762\u4f7f\u7528\u7684\u662f\u52a0\u6cd5\u8bb0\u53f7\uff0c\u4e8c\u8005\u662f\u7b49\u4ef7\u7684\u3002</p> <p>\u66f4\u5177\u4f53\u5730\uff0c\u4e3a\u4e86\u652f\u6301\u7535\u8def\u89c4\u6a21\u4e3a \\(n\\) \u7684\u8bc1\u660e\uff0c Groth16 Trusted Setup \u9700\u8981\u751f\u6210 \\((4n-1)\\) \u4e2a \\(\\mathbb{G}_1\\) \u7fa4\u5143\u7d20\uff0c\u4ee5\u53ca \\(n\\) \u4e2a \\(\\mathbb{G}_2\\) \u7fa4\u5143\u7d20\uff0c\u5177\u4f53\u5143\u7d20\u6784\u6210\u5982\u9898\u9762\u6240\u793a\u3002\u5176\u4e2d\u8fd9\u4e24\u4e2a\u7fa4\u5206\u522b\u6765\u81ea\u4e24\u6761\u66f2\u7ebf\u7684\u5faa\u73af\u5b50\u7fa4\uff0c\u6ee1\u8db3 Pairing \u6027\u8d28\u3002</p> <p>\u4f46\u662f\uff0cDLP \u5e76\u4e0d\u662f\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u662f\u96be\u89e3\u51b3\u7684\uff0c\u5b83\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u662f\u5bb9\u6613\u89e3\u51b3\u7684\uff0c\u8fd9\u5c31\u662f\u672c\u9898\u8003\u5bdf\u7684\u70b9\u3002\u6211\u7b2c\u4e00\u53cd\u5e94\u662f\u8fd9\u7bc7 blog\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u6c42\u89e3 smooth integer \u9636\u7fa4\u7684 DLP\u3002</p>"},{"location":"crypto/group-dynamics/group-dynamics/#prime-order-subgroups-and-elliptic-curve-cofactors","title":"Prime Order Subgroups and Elliptic Curve Cofactors","text":"<p>To make us on the same page, \u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u692d\u5706\u66f2\u7ebf\u5404\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u3002</p> <p>\u6709\u9650\u57df\u4e0a\u692d\u5706\u66f2\u7ebf\u5b9a\u4e49\u4e3a\uff1a \\(E(\\mathbb{F}_p): y^2=x^3+ax+b\\pmod p\\) \uff0c\u5176\u4e2d \\(p\\) \u5c31\u662f\u6709\u9650\u57df\u7684\u6a21\u6570\uff0c\u5b83\u5b9a\u4e49\u4e86\u6709\u9650\u57df \\(\\mathbb{F}_p\\) \uff0c\u800c\u4e14\u5176\u4ed6 4 \u4e2a\u53c2\u6570 \\(x, y, a, b\\) \u5747\u662f\u6709\u9650\u57df\u4e2d\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u6709\u9650\u57df\u6211\u4eec\u79f0\u4e4b\u4e3a\u57df\uff08Base Field\uff09\u3002</p> <p>\u628a\u6709\u9650\u57df\u4e2d\u6240\u6709\u7684\u5143\u7d20\u4ee3\u5165 \\(x\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\u70b9\u5750\u6807\u96c6\u5408 \\(\\{(x_0, y_0), (x_1, y_1)...\\}\\)\uff0c\u8fd9\u4e2a\u96c6\u5408\u6784\u6210\u4e00\u4e2a\u7fa4\uff0c\u7fa4\u5143\u7d20\u6ee1\u8db3\u692d\u5706\u66f2\u7ebf\u4e0a\u70b9\u7684\u52a0\u6cd5\u8fd0\u7b97\uff08\u53ef\u4ee5\u5ef6\u4f38\u81f3\u500d\u70b9\u8fd0\u7b97\uff09\u3002\u7531\u4e8e\u692d\u5706\u66f2\u7ebf\u4e0a\u70b9\u7684\u52a0\u6cd5\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7fa4\u662f\u4e00\u4e2a\u963f\u8d1d\u5c14\u7fa4\uff08Abelian Group\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Schoof \u7b97\u6cd5\u6709\u6548\u5730\u8ba1\u7b97\u70b9\u7684\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u7fa4\u7684\u9636\u3002</p> <p>\u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6709\u9650\u57df\u4e0a\u692d\u5706\u66f2\u7ebf\u8fd9\u4e2a\u70b9\u96c6\u6240\u6784\u6210\u7684\u963f\u8d1d\u5c14\u7fa4\u6ee1\u8db3\u67d0\u4e9b\u597d\u7684\u6027\u8d28\uff0c\u8fd9\u6837\u624d\u80fd\u6ee1\u8db3\u6784\u5efa\u5bc6\u7801\u5b66\u65b9\u6848\u7684\u9700\u6c42\u3002\u6bd4\u5982\u8fd9\u4e2a\u7fa4\u6709\u4e00\u4e2a\u5927\u7d20\u9636\u6570\u7684\u5faa\u73af\u5b50\u7fa4\uff08Cyclic Subgroup\uff09\uff0c\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\u3002\u901a\u5e38\u504f\u597d\u9009\u62e9\u9636\u4e3a\u5927\u7d20\u6570\u7684\u5faa\u73af\u5b50\u7fa4\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u9009\u62e9\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u5b89\u5168\u6027\u3002\u7d20\u6570\u9636\u7684\u5faa\u73af\u5b50\u7fa4\u610f\u5473\u7740\u79bb\u6563\u5bf9\u6570\u95ee\u9898\uff08DLP\uff09\u5728\u8be5\u7fa4\u4e2d\u66f4\u96be\u89e3\u51b3\u3002\u5728\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u6311\u9009\u7684\u5faa\u73af\u5b50\u7fa4\u662f\u7d20\u6570\u9636\u5b50\u7fa4\uff08Prime Order Subgroup\uff09\uff0c\u800c\u975e\u7d20\u6570\u7684\u5e42\u9636\u5b50\u7fa4\u3002</p> <p>\u5047\u8bbe\u5927\u7d20\u6570\u5faa\u73af\u5b50\u7fa4\u7684\u9636\u4e3a \\(r\\) \uff0c\u5b83\u4e5f\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u9650\u57df \\(\\mathbb{F}_r\\)\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6807\u91cf\u57df\uff08Scalar Field\uff09\u3002</p> <p>\u6ce8\u610f\uff1a\u5faa\u73af\u7fa4\u7684\u9636\u4e0d\u4e00\u5b9a\u662f\u7d20\u6570\uff0c\u7406\u8bba\u4e0a\u8fd8\u6709\u53ef\u80fd\u5faa\u73af\u5b50\u7fa4\u9636\u4e3a\u7d20\u6570\u7684\u5e42\uff0c\u867d\u7136\u8fd9\u4f9d\u7136\u662f\u5faa\u73af\u7fa4\uff0c\u4f46\u7d20\u6570\u7684\u5e42\u4f5c\u4e3a\u7fa4\u7684\u9636\u4e0d\u5982\u7d20\u6570\u9636\u90a3\u6837\u666e\u904d\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u7d20\u6570\u9636\u63d0\u4f9b\u4e86\u66f4\u76f4\u63a5\u7684\u5b89\u5168\u6027\u4fdd\u8bc1\u3002</p> <p>\u6211\u4eec\u8fd8\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u662f cofactor\uff1f\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6709\u9650\u57df\u4e0a\u692d\u5706\u66f2\u7ebf\u7684\u70b9\u6784\u6210\u4e00\u4e2a\u963f\u8d1d\u5c14\u7fa4\uff0c\u8fd9\u4e2a\u7fa4\u9636\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Schoof \u7b97\u6cd5\u6709\u6548\u7b97\u51fa\u3002\u5047\u8bbe\u7fa4\u9636\u4e3a \\(q\\)\uff0c\u6839\u636e\u7b97\u672f\u57fa\u672c\u5b9a\u7406\uff08Fundamental Theorem of Arithmetic\uff09\uff0c\u4e00\u4e2a\u5927\u4e8e 1 \u7684\u6b63\u6574\u6570\u53ef\u4ee5\u8868\u793a\u6210\u82e5\u5e72\u4e2a\u8d28\u6570\u4e58\u79ef\u7684\u5f62\u5f0f\u3002\u8003\u8651\u8fd9\u4e2a\u7fa4\u7684\u67d0\u4e2a\u9636\u4e3a \\(r\\) \u7684\u5b50\u7fa4\uff08\u663e\u7136 \\(r | q\\)\uff09\uff0c\u6709 \\(q = hr\\)\uff0c\u8fd9\u4e2a h \u5c31\u88ab\u79f0\u4e4b\u4e3a\u5b50\u7fa4\u7684 cofactor\u3002</p>"},{"location":"crypto/group-dynamics/group-dynamics/#_1","title":"\u4f8b\u5b50","text":"<p>Bitcoin\u4f7f\u7528\u7684\u692d\u5706\u66f2\u7ebf\u662f secp256k1\uff0c\u5b83\u7684\u66f2\u7ebf\u53c2\u6570\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002</p> <p>\u5b83\u7684 Base field \u4e3a \\(\\mathbb{F}_p(p=0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f)\\)\uff0cScalar field \u4e3a \\(\\mathbb{F}_r(r=0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141)\\)\uff0ccofactor \u4e3a 0x1\u3002\u8fd9\u610f\u5473\u7740 Base field \u4e0a\u7684\u692d\u5706\u66f2\u7ebf \\(y^2\\equiv x^3+7\\pmod{p}\\)  \u4e00\u5171\u6709 \\(r * cofactor\\) \u4e2a\u70b9\uff0c\u5e76\u4e14\u6700\u5927\u5faa\u73af\u5b50\u7fa4\u5c31\u662f\u5b83\u672c\u8eab\u3002</p> <p>\u6709\u4e9b\u4e0a\u4e0b\u6587\u4e5f\u4f1a\u628a base field \u8bb0\u4f5c \\(\\mathbb{F}_q\\)\uff0c\u800c\u628a \\(\\mathbb{F}_p\\) \u7edf\u4e00\u7528\u4f5c\u8868\u793a\u7d20\u6570\u6709\u9650\u57df\u3002\u6bd4\u5982 Arkwork \u4e0b ark-ff \u5c31</p>"},{"location":"crypto/group-dynamics/group-dynamics/#pohlig-hellman-algorithm","title":"Pohlig-Hellman Algorithm","text":"<p>\u6709\u4e86\u4e0a\u8ff0\u6982\u5ff5\u57fa\u7840\uff0c\u6211\u4eec\u6765\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Pohlig-Hellman \u7b97\u6cd5\u6765\u653b\u51fb cofactor \u8f83\u5c0f\u7684\u5faa\u73af\u5b50\u7fa4\uff0c\u8fd9\u79cd\u653b\u51fb\u4e5f\u88ab\u79f0\u4e4b\u4e3a <code>Subgroup Confinement Attacks</code> \uff0c\u5b83\u5229\u7528\u4e86\u7fa4\u9636\u662f smooth integer \u7684\u4e8b\u5b9e\u5f62\u6210\u4e86\u6c42\u89e3 DLP \u7684\u653b\u51fb\u4f18\u52bf\u3002</p> <p>WLOG\uff0c\u5047\u8bbe\u751f\u6210\u5143\u4e3a \\(g\\) \u7684\u5faa\u73af\u7fa4 \\(\\langle g\\rangle\\) \u9636\u4e3a \\(r=\\prod_{i=1}^n p_i^{e_i}\\)\uff0c \\(p_i\\) \u662f\u8d28\u6570. \u7ed9\u5b9a \\(g, h = g^x\\) \uff08\u5176\u4e2d \\(x\\in Z_r\\)\uff09\uff0c\u6211\u4eec\u5e0c\u671b\u8ba1\u7b97 \\(x\\) \u7684\u503c\u3002</p>"},{"location":"crypto/group-dynamics/group-dynamics/#babystep-giantstep-algorithm","title":"Babystep-Giantstep Algorithm","text":"<p>\u5927\u6b65\u5c0f\u6b65\u7b97\u6cd5\u662f\u901a\u7528\u7684\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u7684\u65b9\u6cd5\uff0c\u65e0\u524d\u7f6e\u8981\u6c42\u3002\u5b83\u57fa\u4e8e  <code>meet-in-the-middle</code> \u601d\u60f3\u3002</p> <p>\u7ed9\u5b9a \\(g^x=h\\)\uff0c\u9009\u53d6\u4e00\u4e2a\u5927\u5c0f\u63a5\u8fd1\u4e8e \\(\\sqrt{r}\\) \u7684\u6570 \\(T\\)\uff0c\u5219 \\(x\\) \u53ef\u4ee5\u5199\u6210 \\(x=aT+b\\)\uff0c \\(a,b\\)\u672a\u77e5 \\((a,b \\le T)\\)\u3002 </p> <p>\u90a3\u4e48\u539f\u5f0f\u53ef\u4ee5\u5199\u4f5c \\(g^{aT+b}=h\\)\uff0c\u5373 \\(g^{aT}=hg^{-b}\\)\u3002</p> <p>\u6ce8\u610f\u5230\u7b49\u5f0f\u4e24\u8fb9\u5206\u522b\u9700\u8981\u679a\u4e3e \\(a,b\\) \u6b21\u3002\u90a3\u4e48\u7206\u7834\u6240\u6709\u53ef\u80fd\u7684 \\(a,b\\)\uff0c\u5bfb\u627e\u78b0\u649e\uff0c\u8fdb\u800c\u5f97\u5230 \\(aT+b=x\\)\u3002</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt{r})\\)\u3002</p>"},{"location":"crypto/group-dynamics/group-dynamics/#pohlig-hellman-algorithm_1","title":"Pohlig-Hellman Algorithm","text":"<p>\u6709\u6ca1\u6709\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\u5462\uff1f\u6709\uff01</p> <p>\u6211\u4eec\u8981\u6c42 \\(x\\pmod r\\)\uff0c\u8003\u8651\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 CRT\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 \\(r\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3 \\(r=\\prod_{i=1}^n p_i^{e_i}\\)\uff0c\u5206\u522b\u8ba1\u7b97\u51fa \\(x\\pmod{p_i^{e_i}}\\) \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa \\(x\\pmod r\\).</p> <p>\u4e8e\u662f\u95ee\u9898\u89c4\u7ea6\u6210\u4e86\u8ba1\u7b97 \\(a_i=x\\pmod{p_i^{e_i}}\\)\uff0c\u7b80\u8bb0 \\(P_i=p_i^{e_i}\\)\uff0c\u5219\u6709\uff1a \\(x=k_i P_i + a_i\\)</p> <p>\u90a3\u4e48\u5982\u4f55\u8ba1\u7b97 \\(a_i\\)\u5462\uff1f\u6ce8\u610f\u5230\uff1a</p> \\[ \\begin{aligned} h^{r/P_i}&amp;=g^{(r/P_i)x} \\\\ &amp;=g^{r(k_i P_i + a_i)/P_i}\\\\ &amp;=g^{ra_i/P_i}\\\\ &amp;=(g^{r/P_i})^{a_i} \\end{aligned} \\] <p>\u6ce8\u610f\u5230\u7b49\u5f0f\u5de6\u8fb9 \\(h'=h^{r/P_i}\\) \u548c\u53f3\u8fb9 \\(g'=g^{r/P_i}\\) \u90fd\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u3002\u4e8e\u662f\u95ee\u9898\u8f6c\u53d8\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898 \\(h'=g'^{a_i}\\)\u3002</p> <p>\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u5148\u7684 \\(h=g^x\\) \u95ee\u9898\u89c4\u7ea6\u5230\u6c42\u89e3 \\(n\\) \u4e2a \\(h'=g'^{a_i}\\) \u95ee\u9898\u4e0a\u3002\u6ce8\u610f\u65b0\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684 \\(g'\\) \u7684\u9636\u4e3a \\(P_i\\) \uff0c\u4e0d\u518d\u662f \\(r\\)\u3002</p> <p>\u8fd9\u4e2a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1b \\(O(\\sum_{i=1}^n{ \\sqrt{p_i^{e_i}}+\\log r})\\)</p> <p>\u4e0a\u9762\u7684\u5f0f\u5b50\u6709\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u5982\u679c \\(r=p^e\\) \u90a3\u76f8\u5f53\u4e8e\u4f18\u5316\u90fd\u6ca1\u505a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt{p^e}+\\log r)\\) \uff0c\u8ddf\u5927\u6b65\u5c0f\u6b65\u6cd5\u4e00\u81f4\uff0c\u4ecd\u7136\u975e\u5e38\u8017\u65f6\u3002</p> <p>\u4f46\u662f\u8003\u8651\u5230 \\(g'\\) \u7684\u9636\u662f\u7d20\u6570\u7684\u5e42\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u6574\u4e2a\u7b97\u6cd5\u8fd8\u53ef\u4ee5\u4ece \\(O(\\sum_{i=1}^n{ \\sqrt{p_i^{e_i}}+\\log r})\\) \u4f18\u5316\u5230 \\(O(\\sum_{i=1}^n{e_i \\sqrt{p_i}+\\log r})\\)\u3002</p>"},{"location":"crypto/group-dynamics/group-dynamics/#_2","title":"\u4f18\u5316","text":"<p>Main observation \u662f\u65b0\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u5143\u7d20\u7684\u9636\u662f \\(p_i^{e_i}\\)\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8d28\u6570\u7684\u5e42\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6709\u4e00\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u628a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u590d\u6742\u5ea6\u4ece \\(O(\\sqrt{p_i^{e_i}})\\)\u4f18\u5316\u5230 \\(O(e^i\\sqrt{p_i})\\)\u3002</p> <p>WLOG\uff0c\u7ed9\u5b9a \\(g, h=g^x\\) \uff0c\u4e14 \\(g\\) \u7684\u9636\u4e3a \\(p^e\\)\u3002\u6211\u4eec\u9996\u5148\u628a \\(x\\) \u5199\u4f5c \\(x=x_0 + x_1p+ x_2p^2 + \\dots + x_{e-1}p^{e-1}\\)\u3002\u8003\u8651 \\(h^{ p^{e-1} }\\):</p> \\[ \\begin{aligned} h^{ q^{e-1} }&amp;=( g^x )^{ p^{e-1} }\\\\ &amp;=g^{(x_0 + x_1p+ x_2p^2 + \\dots + x_{e-1}p^{e-1})p^{e-1}}\\\\ &amp;=g^{ x_0p^{e-1}}\\\\ &amp;=(g^{ p^{e-1}})^{ x_0} \\end{aligned} \\] <p>\u7b49\u5f0f\u5de6\u8fb9 \\(h^{ q^{e-1} }\\) \u548c\u53f3\u8fb9 \\(g^{ p^{e-1}}\\) \u90fd\u53ef\u4ee5\u6c42\u51fa\u6765\uff0c\u4e8e\u662f\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u89c4\u7ea6\u5230\u4e00\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898\u4e0a\uff0c\u6b64\u65f6 \\(g^{ p^{e-1}}\\) \u7684\u9636\u662f \\(p\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5c0f\u6b65\u5927\u6b65\u6cd5\u5728 \\(O(\\sqrt{p})\\) \u65f6\u95f4\u5185\u8ba1\u7b97\u5f97\u5230 \\(x_0\\)\u3002\u540c\u7406\u6839\u636e \\(h^{e-2}\\) \u6c42 \\(x_1\\)\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u4e8e\u662f\u8fd9\u4e2a\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u6c42\u89e3\u88ab\u4f18\u5316\u5230 \\(O(e\\sqrt{p})\\)\uff0c\u6574\u4e2a Pohlig-Hellman \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u4f18\u5316\u5230 \\(O(\\sum_{i=1}^n{e_i \\sqrt{p_i}+\\log r})\\)\u3002</p> <p>SageMath \u4e3a\u6211\u4eec\u5c01\u88c5\u4e86\u4ee5\u4e0a\u4e24\u79cd\u6c42\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\uff1a</p> <pre><code>R = GF(941)\nh = R(390)\ng = R(627)\n\n# \u5c0f\u6b65\u5927\u6b65\u6cd5\nx = h.log(g)  # 347\nassert g**x == h\n\n\n# Pohlig-Hellman \u6cd5\n# \u9ed8\u8ba4\u7fa4\u8fd0\u7b97\u662f\u4e58\u6cd5\uff0c\u5982\u679c\u662f\u52a0\u6cd5\uff0c\u5219\u9700\u8981\u6307\u5b9a\u53c2\u6570 operation='+'\n# \u8fd8\u53ef\u4ee5\u6307\u5b9a\u751f\u6210\u5143\u7684\u9636 order=xx\uff0c\u53ef\u4ee5\u4f18\u5316\u6548\u7387\nx = discrete_log(h, g)  # 347\nassert g**x == h\n</code></pre>"},{"location":"crypto/group-dynamics/group-dynamics/#3-solution","title":"3. Solution","text":"<p>\u4ece\u4e0a\u8ff0\u80cc\u666f\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7fa4\u9636\u4e3a \\(n\\) \u7684\u963f\u8d1d\u5c14\u7fa4\uff0c\u5982\u679c\u7fa4\u9636\u4e0d\u80fd\u88ab\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u7d20\u6570\u7684\u5e42\u7684\u4e58\u79ef\u5f62\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u963f\u8d1d\u5c14\u7fa4\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u53ea\u80fd\u4f7f\u7528\u5c0f\u6b65\u5927\u6b65\u6cd5\u8ba1\u7b97\uff1b\u5982\u679c\u7fa4\u9636\u53ef\u4ee5\u88ab\u5206\u89e3\u6210\u82e5\u5e72\u5c0f\u7d20\u6570\u7684\u5e42\u7684\u6210\u7ee9\u5f62\u5f0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u963f\u8d1d\u5c14\u7fa4\u7684\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528 Pohlig-Hellman \u7b97\u6cd5\u6709\u6548\u6c42\u51fa\u3002</p> <p>\u9898\u76ee\u7ed9\u5b9a\u7684\u692d\u5706\u66f2\u7ebf\u662f BLS12-381 \uff0c\u5b83\u7684\u5b89\u5168\u53c2\u6570\u4fe1\u606f\u5728\u8fd9\u91cc\u3002</p> <p>\u521d\u6b65\u5206\u6790\uff0c\u5982\u679c\u8981\u6c42\u51fa\u9677\u95e8\u4fe1\u606f \\(s\\) \uff0c\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u3002\u90a3\u4e48\u9996\u5148\u770b Trusted Setup \u662f\u5426\u4f7f\u7528\u5b89\u5168\u7684\u5faa\u73af\u5b50\u7fa4\uff0c\u5982\u679c\u6b63\u786e\u4f7f\u7528\uff0c\u90a3\u4e48\u5e94\u8be5\u6ee1\u8db3 \\(( g_1^s )^r=1\\) .</p> <p>\u4f7f\u7528 SageMath\uff1a</p> <pre><code># 1. \u68c0\u67e5\u662f\u5426\u5728\u5b89\u5168\u5faa\u73af\u5b50\u7fa4\u4e2d\nst0 = E(0x0F99F411A5F6C484EC5CAD7B9F9C0F01A3D2BB73759BB95567F1FE4910331D32B95ED87E36681230273C9A6677BE3A69, 0x12978C5E13A226B039CE22A0F4961D329747F0B78350988DAB4C1263455C826418A667CA97AC55576228FC7AA77D33E5)\n# expected: (0: 1: 0)\nprint(st0 * 0x73EDA753299D7D483339D80809A1D80553BDA402FFFE5BFEFFFFFFFF00000001)\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\u4e0d\u662f\u65e0\u7a77\u8fdc\u70b9\uff0c\u6240\u4ee5\u9898\u76ee\u6ca1\u6709\u4f7f\u7528\u5b89\u5168\u7684\u5faa\u73af\u5b50\u7fa4\u3002\u6253\u5370\u5b9e\u9645\u7684\u5b50\u7fa4\u9636\u53ca\u5176\u5206\u89e3\u56e0\u5b50\uff1a</p> <p><pre><code># 2. \u6253\u5370\u5b9e\u9645 order\u5e76 factor\norder = st0.order()\nprint(order)\nprint(factor(order))\n</code></pre> \u7ed3\u679c:</p> <pre><code>3 * 11 * 10177 * 859267 * 52437899 * 52435875175126190479447740508185965837690552500527637822603658699938581184513\n</code></pre> <p>\u53d1\u73b0\u5b9e\u9645\u5b50\u7fa4 \\(G_1\\) \u7684\u9636\u662f\u7531 cofactor \u4e2d\u7684\u56e0\u5b50\u548c\u5927\u7d20\u6570\u56e0\u5b50\u4e00\u8d77\u7ec4\u6210\u7684\u3002\u4e3a\u4e86\u6ee1\u8db3 pairing\uff0c \\(G_2\\) \u7684\u9636\u4e0e \\(G_1\\) \u7684\u9636\u5fc5\u987b\u4fdd\u6301\u4e00\u81f4\u3002</p> <p>\u9898\u76ee\u8bbe\u8ba1\u8005\u5982\u6b64\u64cd\u4f5c\u4e4b\u540e\uff0c\u770b\u4f3c\u8fd9\u4e24\u4e2a\u62fc\u51d1\u51fa\u6765\u7684\u5faa\u73af\u5b50\u7fa4\u7684\u9636\u4ecd\u7136\u662f\u5927\u7d20\u6570\uff0c\u4f46\u4e0d\u518d\u5b89\u5168\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u8f7b\u6613\u5730\u628a\u8fd9\u4e9b\u70b9\u6620\u5c04\u5230\u4e0d\u5b89\u5168\u7684\u5c0f\u7d20\u6570\u5b50\u7fa4\u4e2d\u3002\u8bb0\u62fc\u51d1\u51fa\u6765\u7684\u5faa\u73af\u5b50\u7fa4 \\(G_1\\)\u7684\u751f\u6210\u5143\u4e3a \\(g_1\\)\uff0c\u90a3\u4e48 \\(g_1^{r_1}\\) \u8fd9\u4e2a\u5143\u7d20\u6240\u6d3e\u751f\u51fa\u6765\u7684\u5faa\u73af\u5b50\u7fa4\u7684\u9636\u5c31\u53d8\u4e3a \\(3 * 11 * 10177 * 859267 * 52437899\\)\u3002</p> <p>\u5728\u8fd9\u4e2a\u65b0\u7684\u5faa\u73af\u5b50\u7fa4\u91cc\uff0c\u7531\u4e8e\u7fa4\u9636\u6ca1\u6709\u5927\u7d20\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Pohlig-Hellman \u7b97\u6cd5\u9ad8\u6548\u7684\u6c42\u51fa\u9677\u95e8 \\(s\\) \u6a21\u5404\u4e2a\u56e0\u5b50\u7684\u503c\uff0c\u8fdb\u800c\u4f7f\u7528 CRT \u6062\u590d\u51fa \\(s\\)\u3002</p> <p>\u4f7f\u7528 \\(g_1\\) \u6765\u6062\u590d \\(s\\pmod{3 * 11 * 10177 * 859267 * 52437899}\\)\uff1a</p> <pre><code>s_n1 = discrete_log(st11 * 52435875175126190479447740508185965837690552500527637822603658699938581184513, st10 * 52435875175126190479447740508185965837690552500527637822603658699938581184513, operation = '+')\n# output: 2335387132884273659\n</code></pre> <p>\u5904\u7406 \\(g_2\\) \u65f6\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a\u7531\u4e8e\u8fd9\u4e2a\u4e8c\u6b21\u6269\u57df\u7684\u5927\u5c0f\u51e0\u4e4e\u662f \\(g_1\\) \u9636\u7684\u5e73\u65b9\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7fa4\u9636\u6211\u4eec\u6ca1\u529e\u6cd5\u76f4\u63a5\u901a\u8fc7 <code>order()</code> \u65b9\u6cd5\u8ba1\u7b97\u3002\u4f46\u662f\u6211\u4eec\u77e5\u9053 \\(G_2\\) \u7684\u9636\u5fc5\u987b\u4e0e \\(G_1\\) \u4fdd\u6301\u4e00\u81f4\uff0c\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u4fe1\u606f\u3002 \\(G_2\\) \u7684\u9636\u65e0\u975e\u4e5f\u662f cofactor \u4e2d\u7684\u51e0\u4e2a\u56e0\u5b50\u62fc\u51d1\uff0c\u6211\u4eec\u9010\u4e2a\u5c1d\u8bd5\u5373\u53ef\u3002\u6700\u7ec8\u5c1d\u8bd5\u5f97\u5230\u9636\u4e3a <code>13 * 23 * 2713 * 11953 * 262069 * 402096035359507321594726366720466575392706800671181159425656785868777272553337714697862511267018014931937703598282857976535744623203249 * 52435875175126190479447740508185965837690552500527637822603658699938581184513</code>. \u4f7f\u7528\u540c\u6837\u7684\u6280\u5de7\u6d88\u9664\u4e24\u4e2a\u5927\u8d28\u56e0\u5b50\uff1a</p> <pre><code>s_n2 = discrete_log(st21 * 402096035359507321594726366720466575392706800671181159425656785868777272553337714697862511267018014931937703598282857976535744623203249 * 52435875175126190479447740508185965837690552500527637822603658699938581184513 * 13 * 23, st20 * 402096035359507321594726366720466575392706800671181159425656785868777272553337714697862511267018014931937703598282857976535744623203249 * 52435875175126190479447740508185965837690552500527637822603658699938581184513 * 13 * 23, 13 * 23 * 2713 * 11953 * 262069, operation = '+')\n# output: 6942769366567\n</code></pre> <p>\u518d\u4f7f\u7528\u4e00\u904d crt \u7ed3\u5408\u8d77\u6765\u5c1d\u8bd5\u6062\u590d s\uff1a</p> <pre><code>s_tag = crt([s_n1, s_n2], [3 * 11 * 10177 * 859267 * 52437899, 2713 * 11953 * 262069])\nprint(\"s_tag: \", s_tag)\nprint(len(s_tag.bits()))\n# s_tag:  62308043734996521086909071585406\n# 106\n</code></pre> <p>\u7ed3\u679c\u8fd8\u4e0d\u662f 128 bit\uff0c\u6700\u591a\u8fd8\u5dee \\(2^{22}\\) \u6b21\u65b9\u3002\u8fd9\u5c31\u53ea\u80fd\u901a\u8fc7\u7206\u7834\u5730\u65b9\u5f0f\u5c1d\u8bd5\u8865\u9f50\u4e86\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u662f\uff1a<code>114939083266787167213538091034071020048</code>\u3002</p> <p>Done.</p>"},{"location":"crypto/group-dynamics/code/","title":"Index","text":""},{"location":"crypto/group-dynamics/code/#zkhack-trusted-setup","title":"zkhack-trusted-setup","text":"<p>DO NOT FORK THE REPOSITORY, AS IT WILL MAKE YOUR SOLUTION PUBLIC. INSTEAD, CLONE IT AND ADD A NEW REMOTE TO A PRIVATE REPOSITORY, OR SUBMIT A GIST</p>"},{"location":"crypto/group-dynamics/code/#trying-it-out","title":"Trying it out","text":"<p>Use <code>cargo run --release</code> to see it in action</p>"},{"location":"crypto/group-dynamics/code/#submitting-a-solution","title":"Submitting a solution","text":"<p>Submit a solution</p>"},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/","title":"Crypto - Let's hash it out","text":"<ul> <li>1. Puzzle Description</li> <li>2. Preliminary<ul> <li>BLS \u7b7e\u540d\u65b9\u6848</li> <li>Hash-to-curve \u64cd\u4f5c</li> </ul> </li> <li>3. Solution</li> <li>4. Conclusion</li> </ul>"},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/#1-puzzle-description","title":"1. Puzzle Description","text":"<p>It all feels random, but it might not be.</p> <p>https://zkhack.dev/events/puzzle1.html</p>"},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/#2-preliminary","title":"2. Preliminary","text":""},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/#bls","title":"BLS \u7b7e\u540d\u65b9\u6848","text":"<p>BLS \u7b7e\u540d\u65b9\u6848\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u914d\u5bf9\uff08pairing\uff09\u5b9e\u73b0\uff0c\u7531\u4e09\u4e2a\u6838\u5fc3\u7b97\u6cd5\u7ec4\u6210\uff1a</p> <ul> <li> <p>Key Generation\uff1a\u9009\u62e9\u7d20\u6570\u9636\u5faa\u73af\u7fa4\u7684\u751f\u6210\u5143 \\(g\\)\uff0c\u968f\u673a\u9009\u62e9\u79c1\u94a5 \\(sk \\in GF(r)\\)\uff0c\u7136\u540e\u751f\u6210\u516c\u94a5 \\(pk = sk \\cdot g\\)\u3002</p> </li> <li> <p>Sign: \u7ed9\u5b9a\u6d88\u606f \\(m \\in \\mathbb{G}\\)\uff0c\u7b7e\u540d\u4e3a\uff1a\\(\\Sigma = sk \\cdot m\\)\u3002</p> </li> <li> <p>Verify: \u9a8c\u8bc1\u7b7e\u540d\u7684\u6709\u6548\u6027\uff0c\u5373\u68c0\u67e5 \\(e(m, pk) = e(g, \\Sigma)\\) \u662f\u5426\u6210\u7acb\u3002</p> </li> </ul>"},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/#hash-to-curve","title":"Hash-to-curve \u64cd\u4f5c","text":"<p>BLS \u7b7e\u540d\u65b9\u6848\u53ea\u80fd\u5904\u7406\u7fa4\u5143\u7d20\u4f5c\u4e3a\u6d88\u606f\uff0c\u800c\u5b9e\u9645\u6d88\u606f\u662f\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u3002\u56e0\u6b64\uff0c\u9700\u8981\u4ee5\u4e0b\u4e24\u6b65\u6620\u5c04\u8fc7\u7a0b\uff1a</p> <ul> <li>\u5c06\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u54c8\u5e0c\u503c\uff08\u4f8b\u5982 blake2s\uff09\uff1b</li> <li>\u5c06\u8be5\u54c8\u5e0c\u503c\u8fdb\u4e00\u6b65\u6620\u5c04\u5230\u7fa4\u5143\u7d20\u4e0a\uff08\u4f7f\u7528 Pedersen Hash \u7b49\u65b9\u6cd5\uff09\u3002</li> </ul> <p>Hash:</p> <pre><code>use blake2s_simd::blake2s;\n\nfn main() {\n    let msg = \"I love you\";\n    let msg_bytes = msg.as_bytes();\n    let hash = blake2s_simd::blake2s(msg_bytes);\n    println!(\"{:?}\", hash);\n}\n</code></pre> <p>to Curve: \u5c06\u54c8\u5e0c\u503c\u6620\u5c04\u5230\u7fa4\u5143\u7d20\u4e00\u822c\u4f7f\u7528 Pedersen Hash\uff1a</p> <pre><code>use pairing::bls12_381::*;\nuse ark_crypto_primitives::crh::pedersen::*;\nuse blake2s_simd::blake2s;\nuse rand_chacha::ChaCha20Rng;\nuse rand::SeedableRng;\n\n#[derive(Clone)]\nstruct PedersenWindow;\n\nimpl Window for PedersenWindow {\n    const WINDOW_SIZE: usize = 128;\n    const NUM_WINDOWS: usize = 2;\n}\n\nfn hash_to_curve(msg: &amp;[u8]) -&gt; G1Affine {\n    let rng = &amp;mut ChaCha20Rng::from_seed([1u8; 32]);\n    let params = CRH::&lt;G1Projective, PedersenWindow&gt;::setup(rng).unwrap();\n    let h = blake2s_simd::blake2s(msg);\n    CRH::&lt;G1Projective, PedersenWindow&gt;::evaluate(&amp;params, h.as_bytes()).unwrap()\n}\n</code></pre>"},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/#3-solution","title":"3. Solution","text":"<p>\u672c\u9898\u5173\u952e\u662f\u6ce8\u610f\u5230 Pedersen Hash \u7684\u751f\u6210\u8fc7\u7a0b\u4f7f\u7528\u7684\u662f\u56fa\u5b9a\u7684\u751f\u6210\u5143\u96c6\u5408\uff0c\u4e14\u6bcf\u4e2a\u7b7e\u540d\u53ef\u770b\u4f5c\u5bf9\u6d88\u606f\u54c8\u5e0c\u6bd4\u7279\u5411\u91cf\u4e0e\u751f\u6210\u5143\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\uff1a</p> \\[ \\Sigma_i = sk \\cdot \\left(b_1(m_i) \\cdot g_1 + b_2(m_i) \\cdot g_2 + \\dots + b_{256}(m_i) \\cdot g_{256}\\right) \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(b(m_i)\\) \u662f\u6d88\u606f \\(m_i\\) \u7ecf blake2s \u54c8\u5e0c\u540e\u7684\u54c8\u5e0c\u503c\uff0c</li> <li>\\(b_j(m_i)\\) \u662f\u54c8\u5e0c\u503c\u7684\u7b2c \\(j\\) \u4e2a\u6bd4\u7279\u4f4d\u3002</li> </ul> <p>\u89c2\u5bdf\u53ef\u77e5\uff0c\u8be5\u7b7e\u540d\u65b9\u6848\u5177\u6709\u7ebf\u6027\u7279\u6027\uff1a</p> <ul> <li>\u4efb\u610f\u591a\u4e2a\u7b7e\u540d\u53ef\u4ee5\u7ebf\u6027\u7ec4\u5408\uff0c\u5f62\u6210\u5bf9\u4e00\u4e2a\u65b0\uff08\u672a\u77e5\uff09\u6d88\u606f\u7684\u7b7e\u540d\u3002</li> </ul> <p>\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u5c06\u6240\u6709\u7ed9\u5b9a\u7684\u7b7e\u540d\u8868\u793a\u4e3a\u77e9\u9635\u5f62\u5f0f\uff1a</p> <ul> <li>\u5b9a\u4e49\u77e9\u9635 \\(A\\) \u4e3a\u54c8\u5e0c\u6bd4\u7279\u7ec4\u6210\u7684\u77e9\u9635\uff0c\u5927\u5c0f\u4e3a \\(256 \\times 256\\)\uff0c\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u5df2\u77e5\u6d88\u606f\u7684\u54c8\u5e0c\u503c\u3002</li> <li>\u8bbe\u76ee\u6807\u6d88\u606f\u54c8\u5e0c\u4e3a\u5411\u91cf \\(y\\)\uff0c\u5219\u5bfb\u627e\u5411\u91cf \\(x\\)\uff0c\u6ee1\u8db3\u7ebf\u6027\u65b9\u7a0b\uff1a</li> </ul> \\[ x A = y \\] <p>\u6c42\u89e3\u8be5\u65b9\u7a0b\u5373\u53ef\u5f97\u5230\u7ec4\u5408\u7cfb\u6570 \\(x\\)\u3002\u901a\u8fc7\u8fd9\u4e9b\u7cfb\u6570\u5bf9\u5df2\u6709\u7684\u7b7e\u540d\u505a\u7ebf\u6027\u7ec4\u5408\uff0c\u5373\u53ef\u5f97\u5230\u76ee\u6807\u6d88\u606f\u7684\u6709\u6548\u7b7e\u540d\u3002</p> <p>\u4ee4\u5df2\u77e5\u7684\u54c8\u5e0c\u77e9\u9635\u4e3a\uff1a</p> \\[ A = \\begin{pmatrix} b_1(m_1) &amp; b_2(m_1) &amp; \\dots &amp; b_{256}(m_1)\\\\ b_1(m_2) &amp; b_2(m_2) &amp; \\dots &amp; b_{256}(m_2)\\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_1(m_{256}) &amp; b_2(m_{256}) &amp; \\dots &amp; b_{256}(m_{256}) \\end{pmatrix} \\] <p>\u7ed9\u5b9a\u76ee\u6807\u54c8\u5e0c\u4e3a\u884c\u5411\u91cf \\(y\\)\uff1a</p> \\[ y = (b_1(m), b_2(m), \\dots, b_{256}(m)) \\] <p>\u5219\u95ee\u9898\u8f6c\u5316\u4e3a\u5728\u6709\u9650\u57df \\(F_r\\) \u4e2d\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\uff1a</p> \\[ x \\cdot A = y \\] <p>\u8ba1\u7b97\u51fa \\(x\\) \u540e\uff0c\u76ee\u6807\u7b7e\u540d\u4e3a\u5bf9\u5e94\u7b7e\u540d\u7684\u7ebf\u6027\u7ec4\u5408\uff1a</p> \\[ \\Sigma = x_1 \\Sigma_1 + x_2 \\Sigma_2 + \\dots + x_{256} \\Sigma_{256} \\] <p>\u6ce8\u610f\uff1a\u7531\u4e8e\u662f\u5728\u6709\u9650\u57df\u4e0a\uff0c\u56e0\u6b64\u77e9\u9635\u6c42\u89e3\u65f6\u5143\u7d20\u5747\u9700\u5728 \\(F_r\\) \u4e2d\u8fdb\u884c\u8fd0\u7b97\u3002</p>"},{"location":"crypto/lets-hash-it-out/lets-hash-it-out/#4-conclusion","title":"4. Conclusion","text":"<p>\u901a\u8fc7\u4e0a\u8ff0\u89c2\u5bdf\uff0c\u8fd9\u4e2a puzzle \u6697\u793a\u4e86 Pedersen Hash \u548c BLS \u7b7e\u540d\u7684\u7ebf\u6027\u7279\u6027\u3002\u53ea\u8981\u63d0\u4f9b\u8db3\u591f\u591a\u7684\u5df2\u77e5\u6d88\u606f\u53ca\u7b7e\u540d\uff0c\u6211\u4eec\u4fbf\u53ef\u901a\u8fc7\u7ebf\u6027\u7ec4\u5408\u7684\u65b9\u5f0f\u5feb\u901f\u8ba1\u7b97\u4efb\u610f\u672a\u77e5\u6d88\u606f\u7684\u6709\u6548\u7b7e\u540d\uff0c\u4f53\u73b0\u4e86\u7b7e\u540d\u65b9\u6848\u7684\u6f5c\u5728\u7ebf\u6027\u6f0f\u6d1e\u548c\u9700\u8981\u6ce8\u610f\u7684\u5b89\u5168\u8bbe\u8ba1\u8981\u70b9\u3002</p> <p>\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\u548c\u6f14\u793a\u8be6\u89c1\uff1aZK-Puzzle-Writups\u3002</p>"},{"location":"crypto/zkCTF/zkCTF/","title":"Crypto - zkCTF WP","text":""},{"location":"crypto/zkCTF/zkCTF/#day-1","title":"Day 1","text":"<p>Puzzles: https://github.com/scalebit/zkCTF-day1</p>"},{"location":"crypto/zkCTF/zkCTF/#kid-math","title":"Kid Math","text":"<p>We need to implement a Fibonacci  Chip using Halo2 and pass the given test cases.</p> <p>Note that the <code>pb</code> in the first row is given (<code>pb = 127</code>) and <code>pa</code> in next rows is also given (<code>pa = 125</code>). So all we need to do is to construct appropriate constraint relationships using the existing conditions mentioned above, So everyone's answer may be different.</p> <p>My constraint is : <code>-a * pa + b * pb - c - pc == 0</code>, where <code>pa = 125, pb = 127, pc = 126</code>. and the output is <code>134</code>.</p>"},{"location":"crypto/zkCTF/zkCTF/#division-quiz","title":"Division Quiz","text":"<p>Another Halo2 puzzle involves lookup table and it requires us to constrain DIV operation, where the dividend is within a certain range.</p> <p>2 constraint have to satisfy:</p> <ol> <li>dividend = divisor * quiotient + reminder</li> <li>reminder &lt; divisor</li> </ol> <p>For the first constraint, we can achieve it using a custom gate. For the second constraint, either use a lookup range proofs or use a addtion gate <code>b = r + k</code>. In addition, we should check all of these value <code>a, b, c, r, k</code> are in certain bits range, e.g [0, 1 &lt;&lt; 128] for u128 division.</p>"},{"location":"crypto/zkCTF/zkCTF/#roundabout","title":"Roundabout","text":"<p>The <code>Roundabout.circom</code> uses MiMCSponge template to generate hash, and the puzzle part lies in:</p> <pre><code>template Gift () {\n    signal input a;\n    signal input b;\n    signal c;\n    signal b_sq;\n    signal c_sq;\n    signal output d;\n\n    component m = MiMCSponge(1,2,1);\n    m.ins[0] &lt;== a;\n    m.k &lt;== 1;\n    c &lt;== m.outs[0];\n    c === 3066844496547985532785966973086993824;\n\n    b_sq &lt;== b * b;\n    c_sq &lt;== c * c;\n\n    assert(b_sq &lt; 999999999);\n\n    9 * b_sq + 37622140664026667386099315436167897444086165906536960040182069717656571868 === c_sq * b_sq; \n\n    d &lt;== b * a;\n}\n</code></pre> <p>To solve the puzzle, we need to reverse the template input <code>a, b</code> and output the expected <code>d</code>.</p> <p></p> <p>Note that the MiMCSponge hasher is initialized as <code>component m = MiMCSponge(1,2,1);</code>, which means that it takes in one input and output a result. And it will run only two rounds of Feistel network internally. As a result:</p> \\[ xL_{in}=a \\\\ xR_{in}=0 \\\\ k = 1\\\\ t = k+xL_{in}=1+a \\\\ t2 = t^2=(1+a)^2 \\\\  t4={t2}^2=(1+a^4) \\\\ xL_0 = xR_{in} + t4 * t=(1+a)^5 \\\\ xR_1 = xL_{in} = a \\] <p><code>S[0].xL_{out}=(1+a)^5=3066844496547985532785966973086993824</code>, so <code>a=19830713</code> and b can be easily compute <code>b=2</code>.</p> <p>If one doesn't know about feistel construction, it can simply try some inputs and observe the output of <code>MiMCSponge(1, 2, 1)</code> is increasing. Then it can use binary search to try and get the input.</p>"},{"location":"crypto/zkCTF/zkCTF/#ethereal","title":"Ethereal","text":""},{"location":"crypto/zkCTF/zkCTF/#description","title":"Description","text":"<p>Welcome to Ethereal. Here, your quest is to forge the Seed Blade, a powerful sword assembled from 10 mystical parts. With each part, your blade becomes stronger, symbolizing your growing cryptographic mastery.</p> <p>Your challenge: to mint Gems with this blade.  Mint 10 gems, and you demonstrate your skill and balance.  Mint 20, and you push the boundaries of your abilities. But beware, each gem brings both power and peril. Will your Seed Blade be a tool of wisdom or lead to your downfall? The path is yours to choose.</p>"},{"location":"crypto/zkCTF/zkCTF/#analysis","title":"Analysis","text":"<p>We are given a <code>mint-client</code> directory  which generated by abigen to help us interact with smart contracts, and a <code>mint-contracts</code> directory containinig smart contract source code.</p> <p>First of all, we look into the contract part. The most important part is the Mint contract in <code>mint-contracts/src/MinGem.sol</code> which defines the main logic of the puzzle.</p> Check contract source code \ud83d\udc40 <pre><code>contract Mint is Verifier {\n    struct DepositInfo {\n        bool registered;\n        uint256 nonce;\n        Pairing.G1Point commitment;\n        Pairing.G1Point soulBox;\n        uint256[] collectedY;\n        bool escaped0;\n        bool escaped1;\n    }\n\n    // function is_sovled(DepositInfo info) returns (bool) {\n    //     if(DepositInfo.escaped0 &amp;&amp; DepositInfo escaped1)\n    //     {return true;}\n    //     else\n    //     {return false;}\n    // }\n\n\n    function getCollectedY(address user) public view returns (uint256[] memory) {\n        return deposits[user].collectedY;\n    }\n\n    mapping(address =&gt; DepositInfo) public deposits;\n    event Deposit(Pairing.G1Point indexed soulbox, Pairing.G1Point commitment,uint256 timestamp);\n    event Minted(address indexed user, uint256 nonce);\n    event Pwned(uint256 indexed privateKey);\n\n    function register(\n        Pairing.G1Point calldata _commitment, \n        Pairing.G1Point calldata _proof, \n        Pairing.G1Point calldata _soulBox\n        ) external payable {\n        address sender = msg.sender;\n        require(!deposits[sender].registered, \"User registered\");\n        require(verifySoulBox(_commitment, _proof, _soulBox), \"Invalid  soul box proof\");\n        deposits[sender] = DepositInfo({\n            registered: true, \n            nonce: 1, \n            commitment: _commitment,\n            soulBox: _soulBox,\n            collectedY: new uint256[](0),\n            escaped0: false,\n            escaped1: false\n        });\n        emit Deposit(_soulBox, _commitment, block.timestamp);\n    }\n\n    function getNonce(address _user) public view returns (uint256) {\n        return deposits[_user].nonce;\n    }\n\n    function mint(\n        Pairing.G1Point calldata _proof, \n        uint256 _value\n    ) external {\n        address sender = msg.sender;\n        uint256 nonce = getNonce(sender);\n        require(deposits[sender].registered, \"User registered\");\n        require(verify(deposits[sender].commitment, _proof, nonce, _value), \"Invalid mint proof\");\n        deposits[sender].collectedY.push(_value);\n\n        uint256[] memory xArray = new uint256[](nonce);\n        for (uint256 i = 0; i &lt; nonce; i++) {\n            xArray[i] = i+1;\n        }\n        uint256[] memory wArray = getBarycentricWeights(xArray);\n        // recover private_key = f(0) by lagrange interpolation\n        uint256 soul = evaluateBarycentricPolynomial(0, deposits[sender].collectedY, wArray);\n        Pairing.G1Point memory soulBox = Pairing.mulScalar(SRS_G1_0, soul);\n        require(soulBox.X != deposits[sender].soulBox.X, \"Soul dispersed\");\n\n        if(nonce == 10){\n            deposits[sender].escaped0 = true;\n        }\n        if(nonce == 20){\n            deposits[sender].escaped1 = true;\n        }\n\n        emit Minted(sender, deposits[sender].nonce);\n        deposits[sender].nonce += 1;\n    }\n\n    function replay() external {\n        address sender = msg.sender;\n        require(deposits[sender].registered, \"User not registered\");\n        delete(deposits[sender]);\n        delete(deposits[sender].collectedY);\n    }\n}\n</code></pre> <p>The register function takes in 3 inputs: a KZG cimmitment <code>_commitment</code> of polynomial, a opening proof <code>_proof</code> of corresponding polynomial and a publicKey <code>_soulBox</code>. The 3 stuffs can be generate by <code>CraftBladeSignature</code> in <code>mint-client/blacksmith.go</code> and it is actually a KZG opening proof of a sword polynomial which is generated by random and stored in the <code>sword.json</code> at index <code>0</code>. So the privateKey is actually the first number of <code>sword.json</code>.</p> <p>Note that <code>verifySoulBox</code> method will verify the KZG openning proof of index 0.</p> <p>we can check it by running:</p> <pre><code>go run . -contract 0x5fbdb2315678afecb367f032d93f642f64180aa3 -action register\n# (*big.Int)(0xc000126000)(7387512810814433601023902593855093598498966062809372162954534333509796980828)\n# (*bn254.G1Affine)(0xc000128040)(E([4663152887034778978712025808205539272224485928059866901645348175989267801382,7337163707989781172140860281787651571090746340470207475573012821654567505278]))\n</code></pre> <p>When we mint gems, we should provide a opening proof of sword poly at the index of <code>nonce</code>. Note that the nonce of user's desposit information in the contract is initialized by 1. The contract will verify the opening proof and further the Mint contract is trying to recover the privateKey f(0) of the sword poly, minting will fail if it is recovered successfully.</p> <p>In order to solve this puzzle, we need to mint 20 gems. However, according to the SRS given in the <code>Constant.sol</code>, we can only generate 16 openning proof at most (the first one is the privateKey (soul) so that we can not use it to produce a opening proof).</p> <p>Obviously, the size of SRS is limited and this is acttually a Rate Limitinmg Nullifier (RLN) protocol on the KZG version. The security of the protocol guaranteed by the polynomial interpolation theorem.</p> <p>There are two ways to solve the problem:</p> <ol> <li>Can we recover the trapdoor of the SRS so that we can add the length of SRS and forge a polynomial of degree &gt; 20?</li> <li>Is the protocol has some vulnerability to allow us forge proofs that these points do not lie on the polynomial of degree 16, like malleable attack?</li> </ol> <p>Both methods are feasible.</p> <p>For #Method 1, by googling the <code>SRS_G1_X=0x2f588cffe99db877a4434b598ab28f81e0522910ea52b45f0adaa772b2d5d352</code>, we can find this repo. It leaked the trapdoor value: <code>115792089237316195423570985008687907853269984665640564039457584007913129639935</code>. I think this is an unexpected solution :)</p> <p>For #Method 2, this article introduces the attack vector to forge kzg opening proofs without knowing the trapdoor value.</p> <p>In detail, we notice that <code>KZGVerifier.verifySoulBox</code> checks the pairing equation when \\(u=0\\):</p> \\[ e(g^{f(\\tau)-f(u)},g)\\overset{?}=e(g^{h(\\tau)},g^{(\\tau-u)}) \\] <p>Normally, we should input \\(f(u)\\) (specifically <code>_value</code> or <code>soul</code>), \\(u\\) (specifically <code>_index</code>) and \\(h(\\tau)\\) (sepecifically <code>_proof</code>). In order to reduce the amounts of \\(\\mathbb{G}_2\\) element, we perform the following transformation:</p> \\[ e(g^{f(\\tau)-f(u)},g)\\overset{?}= e(g^{h(\\tau)},g^{(\\tau-u)}) \\\\ \\Rightarrow e(g^{f(\\tau)-f(u)},g)\\cdot e(g,g)^{-h(\\tau)\\cdot(\\tau-u))}\\overset{?}=1\\\\ \\Rightarrow e(g^{f(\\tau)-f(u)},g)^{u\\cdot h(\\tau)}\\cdot e(g,g)^{-h(\\tau)\\cdot \\tau}\\overset{?}=1\\\\ \\Rightarrow e(g^{u\\cdot h(\\tau)+f(\\tau)-f(u)},g)\\cdot e(g^{-h(\\tau)},g^\\tau)\\overset{?}=1 \\] <p>That is the code implementation corresponding to the puzzle. When \\(u=0\\), we can use the attack vector to forge arbitary proofs.</p> <ol> <li>select a random field element \\(\\gamma\\);</li> <li>construct the new value \\(nv = g^{f(0)-\\gamma\\tau}\\) and new proof \\(nf=g^{h(\\tau)+\\gamma}\\)</li> </ol> <p>Let us verify its correctness:</p> \\[ e(g^{f(\\tau)-f(0)},g)\\cdot e(g^{-h(\\tau)},g^\\tau)\\overset{?}=1\\\\ \\Rightarrow e(g^{f(\\tau)-(f(0)-\\gamma\\tau)},g)\\cdot e(g^{-(h(\\tau)+\\gamma)},g^\\tau)\\overset{?}=1 \\] <p>Then the polynomial equation is:</p> \\[ f(\\tau)-(f(0)-\\gamma\\tau)=(h(\\tau)+\\gamma)\\cdot\\tau\\\\ \\Rightarrow f(\\tau)-f(0)+\\gamma\\tau=h(\\tau)\\tau+\\gamma\\tau\\\\ \\Rightarrow f(\\tau)-f(0)=h(\\tau)\\tau\\\\ \\] <p>Correct!</p> <p>Therefore, we can register with the fake opening proof generated by the existing soulBox and its opening proof. Tee contract will pass the register process and then it can no longer recover the privateKey f(0) because the fake soulBox is a point that does not lie on the polynomial of degree 16 and the protocol loses efficacy.</p>"},{"location":"crypto/zkCTF/zkCTF/#exp","title":"EXP","text":"<pre><code>case \"forge\":\n        // 1. load sword info\n        var sword []fr.Element\n        f, err := os.Open(\"sword.json\")\n        panicErr(err)\n        defer f.Close()\n        decoder := json.NewDecoder(f)\n        err = decoder.Decode(&amp;sword)\n        panicErr(err)\n\n        // 2. forge\n        bladeCommitment, bladeProof := CraftBladeSignature(sword, SRS)\n        commitmentPoint := G1AffineToG1Point(&amp;bladeCommitment)\n        // forge the fake bladeProof\n        var fakeProof bn254.G1Affine\n        fakeProof.ScalarMultiplication(&amp;SRS.Pk.G1[0], big.NewInt(114514)) // g^{114514})\n        spew.Dump(fakeProof)\n        fakeProof.Add(&amp;fakeProof, &amp;bladeProof.H)\n        spew.Dump(fakeProof)\n        bladeProofPoint := G1AffineToG1Point(&amp;fakeProof)\n        spew.Dump(bladeProofPoint)\n\n        var fakeSoulBox bn254.G1Affine\n        fakeSoulBox.ScalarMultiplication(&amp;SRS.Pk.G1[1], big.NewInt(114514)) // g^{\\tau * 114514})\n        fakeSoulBox.Sub(&amp;bladeProof.PublicKeyG1Aff, &amp;fakeSoulBox)\n        soulBox := G1AffineToG1Point(&amp;fakeSoulBox)\n\n        // 3. register\n        mintContract.Register(transactor, *commitmentPoint, *bladeProofPoint, *soulBox)\n    }\n</code></pre> <p>After register, when can mint as much as we want!</p>"},{"location":"crypto/zkCTF/zkCTF/#day-2","title":"Day 2","text":"<p>Puzzles: https://github.com/scalebit/zkCTF-day2</p>"},{"location":"crypto/zkCTF/zkCTF/#is-zero","title":"Is Zero","text":"<p>This is a simple is_zero circuit implement. According to the test case, we know that the input arrays <code>a, b</code> are the input and result respectively.</p> <p>The 3 advice columns are repectively a, a_inv and b. Then We configure and asssign them.</p>"},{"location":"crypto/zkCTF/zkCTF/#mixer","title":"Mixer","text":"<p>We are required to drain the immutable contract Mixer.</p> <p>The implementation is quiet similar with the Tornado Cash protocol. One can deposit 1 ether with a commitment (usually a hash of some secret value), then withdraw by providing the corresponding proof that the secret value can be exactly used to generate the commitment. Nullifier is a clever mechinism that make sure  a message only takes effect once. It is the nullifiers keep the protocol from suffering double-spending attack and nullifiers have something to do with the secret value so that verifier can check the prover indeed owns the secret value to generate the corresponding commitment.</p> <p>When it comes to draining a tornado cash protocol, the first possibility that comes to my mind is if we can forge the nullifiers. One should always pay attention to the field operation in the zk application and always check the input data validation.</p> <p>According to the code given in the <code>Verifier.sol</code>, we notice the finite field that protocol works on is \\(\\mathbb{F}_p\\), where \\(p=21888242871839275222246405745257275088548364400416034343698204186575808495617\\), known as the modulus of bn254 curve. But uint256 in solidity can represent a number of 256 bits, so it remains a huge space for hackers to forge nullifiers. Therefore, protocol has to check that the range of nullifier is strictly within finite field. However, it does not.</p> <p>So we can repeatly withdraw funds with the same proof and commitment using as many as nullifiers we want by adding <code>p</code> repeatly, until the contract drains.</p>"},{"location":"crypto/zkCTF/zkCTF/#familiar-strangers","title":"Familiar Strangers","text":""},{"location":"crypto/zkCTF/zkCTF/#description_1","title":"Description","text":"<p>In the realm of the familiar, where logic gates are the silent sentinels of truth, lies a challenge shrouded in enigma. \"Familiar Strangers\" beckons you to a world where the simplest of circuits hide secrets just beyond the veil of obviousness. These circuits, reminiscent of the ones you've met countless times, now hold a mystery that only a true Circom savant can unravel. Two levels, each a step deeper into the cryptic dance of numbers and logic, await your prowess. Are you ready to discover the true inputs and reveal the concealed answers within? Find the key, communicate with our judge service, and claim your place among the elite who see beyond the familiar to the truth that lies beneath.</p>"},{"location":"crypto/zkCTF/zkCTF/#analysis_1","title":"Analysis","text":"<p>We are given 2 circom circuits (respectively level1 and level2) and required to reveal the inputs.</p> <pre><code>template Level1() {\n    signal input in;\n    signal output out;\n    out &lt;== 1;\n    component lt = LessThan(201);\n    lt.in[0] &lt;== in;\n    lt.in[1] &lt;== 6026017665971213533282357846279359759458261226685473132380160;\n    lt.out === out;\n    component gt = GreaterThan(201);\n    gt.in[0] &lt;== in;\n    gt.in[1] &lt;== -401734511064747568885490523085290650630550748445698208825344;\n    gt.out === out;\n}\n</code></pre> <p>Level1 circuit constrains the <code>out</code> signal to 1, and the <code>in</code> signal less than <code>6026017665971213533282357846279359759458261226685473132380160</code> and greater than <code>-401734511064747568885490523085290650630550748445698208825344</code>. Note that the input is expected to be a number with 201 bits but <code>LessThan</code> and <code>GreaterThan</code> template never checks it is within the valid range. This attack vector is well explained here</p> <p>To pass the circuit, we only need to find a number whose 202th bit is 0 within [0, 2**201).</p> <pre><code>6026017665971213533282357846279359759458261226685473132380160 % 2**n\n# 2812141577453232982198433661597034554413855239119887461777408\n-401734511064747568885490523085290650630550748445698208825344 % 2**n\n# 2812141577453232982198433661597034554413855239119887461777408\n</code></pre> <p>Do the same operation with level2 circuit:</p> <pre><code>3533700027045102098369050084895387317199177651876580346993442643999981568 % (1&lt;&lt;241)\n# 5897488333439202455083409550285544209858125342430750230241414742016\n-3618502782768642773547390826438087570129142810943142283802299270005870559232 % (1&lt;&lt;251)\n# 5897488333439202455083409550285544209858125342430750230241414742016\n</code></pre> <p>Note that we need to constrain the length of input of level2 circuit to be great and equal than 70. We can make use of the characteristics of field operations again, which is known as input alias issue. </p> <pre><code>input_of_level2 = 5897488333439202455083409550285544209858125342430750230241414742016 + p\n</code></pre> <p>Because this is just a check in javascript, we can simply add some leading-zero before the input, saying <code>00005897488333439202455083409550285544209858125342430750230241414742016</code> to bypass this check.</p>"},{"location":"crypto/zkCTF/zkCTF/#what-a-waste","title":"What a Waste","text":"<p>We are given a Round 2 seed random value but nothing else and required to forge a proof.</p> <p>Emmm... Try to figure it out next time.</p>"},{"location":"crypto/zkCTF/day1/Division%20Quiz/description/","title":"ZK  CFT - Halo2 - Int Division","text":""},{"location":"crypto/zkCTF/day1/Division%20Quiz/description/#overview","title":"Overview","text":"<ol> <li>This is a quiz about Halo2 usage. The standard answer would not be given to participants</li> <li>Instead, a file would be given, with all necessary structs and missing logics. Participants are required to fill in the blanks, compile the program and run tests</li> <li>Multiple test cases would be given, the prover program shall be tested against them</li> </ol>"},{"location":"crypto/zkCTF/day1/Division%20Quiz/description/#problem-description","title":"Problem description","text":"<p>While doing proof we always face some basic arithematics, such as int division. It is a very intuitive operation on normal programming language, but one might find it a bit harder when doing it in crypto world -- for we always use Finte Field. For each non-zero element, it has inverse, so that a normal int division is not obeying ordinary division just like Python. For example, in Fp where p = 11, 10 div 3 = 7 mod 11 -- for inverse of 3 is 4, 11 div 3 = 10 times 4 = 7 mod 11. While we expect an 'ordinary' int division: 10 // 3 = 3. Now you are required to simulate an int division in Halo2. We limit the size as U8. So you are actually implementing an U8 division in a finite file Fr, which is the scalar field of ecliptic curve group BN256.</p>"},{"location":"crypto/zkCTF/day1/Division%20Quiz/description/#comand","title":"Comand","text":"<p>cargo run  </p>"},{"location":"crypto/zkCTF/day1/Division%20Quiz/description/#example","title":"Example","text":"<p>Input 10 3 3 Explain: Proof generates and verifier passes it. It is an U8 division</p>"},{"location":"crypto/zkCTF/day1/Division%20Quiz/description/#solve","title":"Solve","text":"<p>Sumbit quiz.rs to solve the puzzle.</p>"},{"location":"crypto/zkCTF/day1/Ethereal/","title":"The Ethereal Quest","text":""},{"location":"crypto/zkCTF/day1/Ethereal/#story","title":"Story","text":"<p>Welcome to Ethereal. Here, your quest is to forge the Seed Blade, a powerful sword assembled from 10 mystical parts. With each part, your blade becomes stronger, symbolizing your growing cryptographic mastery.</p> <p>Your challenge: to mint Gems with this blade.  Mint 10 gems, and you demonstrate your skill and balance.  Mint 20, and you push the boundaries of your abilities. But beware, each gem brings both power and peril. Will your Seed Blade be a tool of wisdom or lead to your downfall? The path is yours to choose.</p>"},{"location":"crypto/zkCTF/day1/Ethereal/#environment-setup","title":"Environment Setup","text":""},{"location":"crypto/zkCTF/day1/Ethereal/#starting-an-ethereum-node","title":"Starting an Ethereum Node","text":"<p>Launch an Ethereum node: <pre><code>anvil\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#deploying-the-contract","title":"Deploying the Contract","text":"<p>Navigate to the contract directory and deploy the contract: <pre><code># Enter the contract directory\ncd mint-contracts\n\n# Deploy the Mint contract\nforge create Mint --private-key=your_key\n\n# Return to the previous directory\ncd -\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#starting-the-challenge","title":"Starting the Challenge","text":""},{"location":"crypto/zkCTF/day1/Ethereal/#initial-setup","title":"Initial Setup","text":"<p>Change to the client directory: <pre><code>cd mint-client\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#challenge-steps","title":"Challenge Steps","text":""},{"location":"crypto/zkCTF/day1/Ethereal/#1-the-initiation-of-the-ethereal-quest","title":"1. The Initiation of the Ethereal Quest","text":"<p>Begin your journey by registering: <pre><code>go run . -contract your_contract_address -action register\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#2-the-forging-of-ethereum-gems","title":"2. The Forging of Ethereum Gems","text":"<p>Mint Ethereum Gems, each one bringing you closer to your goal: <pre><code>go run . -contract your_contract_address -action mint\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#3-the-path-of-redemption","title":"3. The Path of Redemption","text":"<p>Should you falter, replay and learn from your missteps: <pre><code>go run . -contract your_contract_address -action replay\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#4-unveil-your-treasures","title":"4. Unveil Your Treasures","text":"<p>Verifying the Escape0 Flag: If you've successfully minted 10 gems, the \"escape0\" flag should now be set, symbolizing a key achievement in your quest. This flag reflects your adeptness in navigating the challenges and evading the watchful eyes of the Watchdog.</p> <p>Verifying the Escape1 Flag: For the bold adventurers who pushed their limits to mint 20 gems, the \"escape1\" flag would be their coveted prize. Achieving this flag marks you as one of the few who have reached the pinnacle of daring and strategy in the quest. To check your achievements and claim your flags, invoke the following incantation: <pre><code>go run . -contract your_contract_address -action query\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/#command-options","title":"Command Options","text":"<p>Use these options for specific actions: <pre><code>go run .\n# Options:\n# -action [register, mint, replay, query]\n# -contract [contract_address]\n# -rpc [RPC_endpoint]\n# -account [account_address]\n# -privateKey [private_key]\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/","title":"Index","text":""},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#foundry","title":"Foundry","text":"<p>Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.</p> <p>Foundry consists of:</p> <ul> <li>Forge: Ethereum testing framework (like Truffle, Hardhat and DappTools).</li> <li>Cast: Swiss army knife for interacting with EVM smart contracts, sending transactions and getting chain data.</li> <li>Anvil: Local Ethereum node, akin to Ganache, Hardhat Network.</li> <li>Chisel: Fast, utilitarian, and verbose solidity REPL.</li> </ul>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#documentation","title":"Documentation","text":"<p>https://book.getfoundry.sh/</p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#usage","title":"Usage","text":""},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#build","title":"Build","text":"<pre><code>$ forge build\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#test","title":"Test","text":"<pre><code>$ forge test\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#format","title":"Format","text":"<pre><code>$ forge fmt\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#gas-snapshots","title":"Gas Snapshots","text":"<pre><code>$ forge snapshot\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#anvil","title":"Anvil","text":"<pre><code>$ anvil\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#deploy","title":"Deploy","text":"<pre><code>$ forge script script/Counter.s.sol:CounterScript --rpc-url &lt;your_rpc_url&gt; --private-key &lt;your_private_key&gt;\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#cast","title":"Cast","text":"<pre><code>$ cast &lt;subcommand&gt;\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/#help","title":"Help","text":"<pre><code>$ forge --help\n$ anvil --help\n$ cast --help\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/","title":"Forge Standard Library \u2022","text":"<p>Forge Standard Library is a collection of helpful contracts and libraries for use with Forge and Foundry. It leverages Forge's cheatcodes to make writing tests easier and faster, while improving the UX of cheatcodes.</p> <p>Learn how to use Forge-Std with the \ud83d\udcd6 Foundry Book (Forge-Std Guide).</p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#install","title":"Install","text":"<pre><code>forge install foundry-rs/forge-std\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#contracts","title":"Contracts","text":""},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#stderror","title":"stdError","text":"<p>This is a helper contract for errors and reverts. In Forge, this contract is particularly helpful for the <code>expectRevert</code> cheatcode, as it provides all compiler builtin errors.</p> <p>See the contract itself for all error codes.</p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#example-usage","title":"Example usage","text":"<pre><code>import \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    ErrorsTest test;\n\n    function setUp() public {\n        test = new ErrorsTest();\n    }\n\n    function testExpectArithmetic() public {\n        vm.expectRevert(stdError.arithmeticError);\n        test.arithmeticError(10);\n    }\n}\n\ncontract ErrorsTest {\n    function arithmeticError(uint256 a) public {\n        uint256 a = a - 100;\n    }\n}\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#stdstorage","title":"stdStorage","text":"<p>This is a rather large contract due to all of the overloading to make the UX decent. Primarily, it is a wrapper around the <code>record</code> and <code>accesses</code> cheatcodes. It can always find and write the storage slot(s) associated with a particular variable without knowing the storage layout. The one major caveat to this is while a slot can be found for packed storage variables, we can't write to that variable safely. If a user tries to write to a packed slot, the execution throws an error, unless it is uninitialized (<code>bytes32(0)</code>).</p> <p>This works by recording all <code>SLOAD</code>s and <code>SSTORE</code>s during a function call. If there is a single slot read or written to, it immediately returns the slot. Otherwise, behind the scenes, we iterate through and check each one (assuming the user passed in a <code>depth</code> parameter). If the variable is a struct, you can pass in a <code>depth</code> parameter which is basically the field depth.</p> <p>I.e.: <pre><code>struct T {\n    // depth 0\n    uint256 a;\n    // depth 1\n    uint256 b;\n}\n</code></pre></p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#example-usage_1","title":"Example usage","text":"<pre><code>import \"forge-std/Test.sol\";\n\ncontract TestContract is Test {\n    using stdStorage for StdStorage;\n\n    Storage test;\n\n    function setUp() public {\n        test = new Storage();\n    }\n\n    function testFindExists() public {\n        // Lets say we want to find the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `find` command\n        uint256 slot = stdstore.target(address(test)).sig(\"exists()\").find();\n        assertEq(slot, 0);\n    }\n\n    function testWriteExists() public {\n        // Lets say we want to write to the slot for the public\n        // variable `exists`. We just pass in the function selector\n        // to the `checked_write` command\n        stdstore.target(address(test)).sig(\"exists()\").checked_write(100);\n        assertEq(test.exists(), 100);\n    }\n\n    // It supports arbitrary storage layouts, like assembly based storage locations\n    function testFindHidden() public {\n        // `hidden` is a random hash of a bytes, iteration through slots would\n        // not find it. Our mechanism does\n        // Also, you can use the selector instead of a string\n        uint256 slot = stdstore.target(address(test)).sig(test.hidden.selector).find();\n        assertEq(slot, uint256(keccak256(\"my.random.var\")));\n    }\n\n    // If targeting a mapping, you have to pass in the keys necessary to perform the find\n    // i.e.:\n    function testFindMapping() public {\n        uint256 slot = stdstore\n            .target(address(test))\n            .sig(test.map_addr.selector)\n            .with_key(address(this))\n            .find();\n        // in the `Storage` constructor, we wrote that this address' value was 1 in the map\n        // so when we load the slot, we expect it to be 1\n        assertEq(uint(vm.load(address(test), bytes32(slot))), 1);\n    }\n\n    // If the target is a struct, you can specify the field depth:\n    function testFindStruct() public {\n        // NOTE: see the depth parameter - 0 means 0th field, 1 means 1st field, etc.\n        uint256 slot_for_a_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(0)\n            .find();\n\n        uint256 slot_for_b_field = stdstore\n            .target(address(test))\n            .sig(test.basicStruct.selector)\n            .depth(1)\n            .find();\n\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_a_field))), 1);\n        assertEq(uint(vm.load(address(test), bytes32(slot_for_b_field))), 2);\n    }\n}\n\n// A complex storage contract\ncontract Storage {\n    struct UnpackedStruct {\n        uint256 a;\n        uint256 b;\n    }\n\n    constructor() {\n        map_addr[msg.sender] = 1;\n    }\n\n    uint256 public exists = 1;\n    mapping(address =&gt; uint256) public map_addr;\n    // mapping(address =&gt; Packed) public map_packed;\n    mapping(address =&gt; UnpackedStruct) public map_struct;\n    mapping(address =&gt; mapping(address =&gt; uint256)) public deep_map;\n    mapping(address =&gt; mapping(address =&gt; UnpackedStruct)) public deep_map_struct;\n    UnpackedStruct public basicStruct = UnpackedStruct({\n        a: 1,\n        b: 2\n    });\n\n    function hidden() public view returns (bytes32 t) {\n        // an extremely hidden storage slot\n        bytes32 slot = keccak256(\"my.random.var\");\n        assembly {\n            t := sload(slot)\n        }\n    }\n}\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#stdcheats","title":"stdCheats","text":"<p>This is a wrapper over miscellaneous cheatcodes that need wrappers to be more dev friendly. Currently there are only functions related to <code>prank</code>. In general, users may expect ETH to be put into an address on <code>prank</code>, but this is not the case for safety reasons. Explicitly this <code>hoax</code> function should only be used for address that have expected balances as it will get overwritten. If an address already has ETH, you should just use <code>prank</code>. If you want to change that balance explicitly, just use <code>deal</code>. If you want to do both, <code>hoax</code> is also right for you.</p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#example-usage_2","title":"Example usage:","text":"<pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"forge-std/Test.sol\";\n\n// Inherit the stdCheats\ncontract StdCheatsTest is Test {\n    Bar test;\n    function setUp() public {\n        test = new Bar();\n    }\n\n    function testHoax() public {\n        // we call `hoax`, which gives the target address\n        // eth and then calls `prank`\n        hoax(address(1337));\n        test.bar{value: 100}(address(1337));\n\n        // overloaded to allow you to specify how much eth to\n        // initialize the address with\n        hoax(address(1337), 1);\n        test.bar{value: 1}(address(1337));\n    }\n\n    function testStartHoax() public {\n        // we call `startHoax`, which gives the target address\n        // eth and then calls `startPrank`\n        //\n        // it is also overloaded so that you can specify an eth amount\n        startHoax(address(1337));\n        test.bar{value: 100}(address(1337));\n        test.bar{value: 100}(address(1337));\n        vm.stopPrank();\n        test.bar(address(this));\n    }\n}\n\ncontract Bar {\n    function bar(address expectedSender) public payable {\n        require(msg.sender == expectedSender, \"!prank\");\n    }\n}\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#std-assertions","title":"Std Assertions","text":"<p>Expand upon the assertion functions from the <code>DSTest</code> library.</p>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#consolelog","title":"<code>console.log</code>","text":"<p>Usage follows the same format as Hardhat. It's recommended to use <code>console2.sol</code> as shown below, as this will show the decoded logs in Forge traces.</p> <pre><code>// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console2.sol\";\n...\nconsole2.log(someValue);\n</code></pre> <p>If you need compatibility with Hardhat, you must use the standard <code>console.sol</code> instead. Due to a bug in <code>console.sol</code>, logs that use <code>uint256</code> or <code>int256</code> types will not be properly decoded in Forge traces.</p> <pre><code>// import it indirectly via Test.sol\nimport \"forge-std/Test.sol\";\n// or directly import it\nimport \"forge-std/console.sol\";\n...\nconsole.log(someValue);\n</code></pre>"},{"location":"crypto/zkCTF/day1/Ethereal/mint-contracts/lib/forge-std/#license","title":"License","text":"<p>Forge Standard Library is offered under either MIT or Apache 2.0 license.</p>"},{"location":"crypto/zkCTF/day1/Kid%20Math/description/","title":"ZK  CFT - Halo2 - Kid's Math","text":""},{"location":"crypto/zkCTF/day1/Kid%20Math/description/#overview","title":"Overview","text":"<ol> <li>This is a quiz about Halo2 usage. The standard answer would not be given to participants</li> <li>Instead, a file would be given, with all necessary structs and missing logics. Participants are required to fill in the blanks, compile the program and run tests</li> <li>Multiple test cases would be given, the prover program shall be tested against them</li> </ol>"},{"location":"crypto/zkCTF/day1/Kid%20Math/description/#problem-description","title":"Problem description","text":"<p>After a hard time on the CTF, you finally find something that seemed very simple to solve. It requires you to forge the proof that you know the value of the term \"x\": \"[1,2,3,5,x]\" using the halo2 proof system. Unfortunately, when you write down your answer, you find your proof just can't be verified! Would you try again with incomplete source code, and see how to break through the verifier?</p>"},{"location":"crypto/zkCTF/day1/Kid%20Math/description/#comand","title":"Comand","text":"<p>cargo test</p>"},{"location":"crypto/zkCTF/day1/Kid%20Math/description/#test-and-solve","title":"Test and Solve","text":"<p>You may only test your circuit by upload the fib.rs</p>"},{"location":"crypto/zkCTF/day1/Roundabout/description/","title":"Description","text":"<p>Roundabout</p> <p>Your girlfriend gives you a surprise for your 10<sup>th</sup> anniversary, contained in a box that guarded by a Circom circuit. She told you the key to open it is her birthday. But you just can't remember. Hope you find a way to see this gift (spoiler, it's the flag).</p>"},{"location":"crypto/zkCTF/day2/Is%20Zero/description/","title":"ZK  CFT - Halo2 - Is Zero","text":""},{"location":"crypto/zkCTF/day2/Is%20Zero/description/#overview","title":"Overview","text":"<ol> <li>This is a quiz about Halo2 usage. The standard answer would not be given to participants</li> <li>Instead, a file would be given, with all necessary structs and missing logics. Participants are required to fill in the blanks, compile the program and run tests</li> <li>Multiple test cases would be given, the prover program shall be tested against them</li> </ol>"},{"location":"crypto/zkCTF/day2/Is%20Zero/description/#problem-description","title":"Problem description","text":"<p>The is_zero circuit is an important component within the Halo2 zero-knowledge proof (ZKP) system, a common requirement is to prove that a certain value is zero without revealing the value itself. The is_zero circuit is designed to facilitate this need. It's a gadget or a sub-circuit that can be used within a larger circuit to prove that a given value is zero, which is crucial in various computations and conditional checks within a zero-knowledge proof system.</p> <p>Now you are required to simulate an is_zero checking in Halo2. When the input is zero, it should output 1, otherwise, it should output 0.</p>"},{"location":"crypto/zkCTF/day2/Is%20Zero/description/#comand","title":"Comand","text":"<p>cargo run</p>"},{"location":"crypto/zkCTF/day2/Is%20Zero/description/#example","title":"Example","text":"<p>input == 0 and output == 1 input == 2 and output == 0</p>"},{"location":"crypto/zkCTF/day2/Is%20Zero/description/#solve","title":"Solve","text":"<p>Sumbit is_zero.rs to solve the puzzle.</p>"},{"location":"crypto/zkCTF/day2/familiar_strangers/","title":"Familiar Strangers","text":"<p>In the realm of the familiar, where logic gates are the silent sentinels of truth, lies a challenge shrouded in enigma. \"Familiar Strangers\" beckons you to a world where the simplest of circuits hide secrets just beyond the veil of obviousness. These circuits, reminiscent of the ones you've met countless times, now hold a mystery that only a true Circom savant can unravel. Two levels, each a step deeper into the cryptic dance of numbers and logic, await your prowess. Are you ready to discover the true inputs and reveal the concealed answers within? Find the key, communicate with our judge service, and claim your place among the elite who see beyond the familiar to the truth that lies beneath.</p>"},{"location":"crypto/zkCTF/day2/familiar_strangers/#how-to-play","title":"How to play?","text":"<ol> <li>Install the latest circom, check https://docs.circom.io/getting-started/installation/.</li> <li>Install the dependencies with <code>npm install</code>.</li> <li>Read the circuit and stranger_judge.js carefully to understand the challenge.</li> <li>Find the correct inputs and send to the judge service to win the challenge.</li> </ol>"},{"location":"crypto/zkCTF/day2/familiar_strangers/#how-to-run-judge-service","title":"How to run judge service?","text":"<p>For local testing, you can run the judge service with:</p> <pre><code>node stranger_judge.js\n</code></pre>"},{"location":"crypto/zkCTF/day2/familiar_strangers/#how-to-send-request-to-judge-service","title":"How to send request to judge service?","text":"<p>Example request with curl:</p> <pre><code>curl -X POST http://localhost:3000/judge -H \"Content-Type: application/json\" -d '{\"l1\": \"123\", \"l2\": \"123\"}'\n</code></pre> <p>The <code>l1</code> and <code>l2</code> are the two levels of this challenge.</p> <p>The service will return <code>{\"success\":true}</code> when the input is correct, otherwise it will return <code>{\"success\":false}</code>.</p>"},{"location":"crypto/zkCTF/day2/familiar_strangers/#reference","title":"Reference","text":"<p>We include the below files in README for your convenience. You should always read the latest code in the correct location.</p> <p>The challenge.circom is the circuits for this challenge.</p> <pre><code>pragma circom 2.1.7;\n\ninclude \"../node_modules/circomlib/circuits/comparators.circom\";\n\ntemplate Level1() {\n    signal input in;\n    signal output out;\n    out &lt;== 1;\n    component lt = LessThan(201);\n    lt.in[0] &lt;== in;\n    lt.in[1] &lt;== 6026017665971213533282357846279359759458261226685473132380160;\n    lt.out === out;\n    component gt = GreaterThan(201);\n    gt.in[0] &lt;== in;\n    gt.in[1] &lt;== -401734511064747568885490523085290650630550748445698208825344;\n    gt.out === out;\n}\n\ntemplate Level2() {\n    signal input in;\n    signal output out;\n    out &lt;== 1;\n    component lt = GreaterThan(241);\n    lt.in[0] &lt;== 3533700027045102098369050084895387317199177651876580346993442643999981568;\n    lt.in[1] &lt;== in;\n    lt.out === out;\n    component gt = LessThan(251);\n    gt.in[0] &lt;== -3618502782768642773547390826438087570129142810943142283802299270005870559232;\n    gt.in[1] &lt;== in;\n    gt.out === out;\n}\n</code></pre> <p>The stranger_judge.js is the code for the judge service.</p> <pre><code>const express = require('express');\nconst bodyParser = require('body-parser');\nconst { wasm: wasm_tester } = require('circom_tester');\nconst path = require('path');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PASS = \"pass\";\nconst FAIL = \"fail\";\n\nasync function runCircuit(circuitPath, input) {\n    const circuit = await wasm_tester(circuitPath, {\n        output: path.join(__dirname, \"./test/generated\"),\n        // recompile: true,\n    });\n    try {\n        const witness = await circuit.calculateWitness({ in: input });\n        await circuit.checkConstraints(witness);\n        return PASS;\n    } catch (error) {\n        return error.toString();\n    }\n}\n\n// Example inputs {\"l1\": \"123\", \"l2\": \"123\"}\n// Test with curl\n// curl -X POST http://localhost:3000/judge -H \"Content-Type: application/json\" -d '{\"l1\": \"123\", \"l2\": \"123\"}'\n\napp.post('/judge', async (req, res) =&gt; {\n    // random number for logging\n    const identifier = Math.floor(Math.random() * 100000000000);\n    const inputs = req.body;\n    console.log(\"identifier\", identifier, \"inputs\", inputs);\n\n    let result = FAIL;\n\n    // Level 1\n    result = await runCircuit(path.join(__dirname, \"test/level1_test.circom\"), inputs.l1);\n    if (result != PASS) {\n        res.json({ success: false });\n        return;\n    }\n\n    // Level 2\n    if (inputs.l2.length &lt;= 70) {\n        res.json({ success: false });\n        return;\n    }\n    result = await runCircuit(path.join(__dirname, \"test/level2_test.circom\"), inputs.l2);\n    if (result != PASS) {\n        res.json({ success: false });\n        return;\n    }\n\n    res.json({ success: true });\n    console.log(\"identifier\", identifier, \"success\");\n    return;\n});\n\nconst port = 3000;\napp.listen(port, () =&gt; {\n    console.log(`Stranger Judge Service running on port ${port}`);\n});\n</code></pre>"}]}